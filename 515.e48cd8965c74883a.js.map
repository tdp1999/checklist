{"version":3,"mappings":"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","names":["ParamsItemResolver","resolve","route","state","of","params","item","factory","i0","ctx_r12","routes","path","component","constructor","_activatedRoute","_apiPageListService","_categoryService","_itemService","_router","_snackbar","_sidenavService","this","Subject","ngOnInit","checkList$","pipe","switchMap","section","getCategoryItemByCategorySlug","startWith","catchError","error","console","loadingError$","next","open","message","duration","onCategoryNotFound","tap","itemList","log","itemCheckboxList","map","_id","isDone","categoryID","ngOnDestroy","onCheckboxChanges","patchItem","subscribe","remindToReloadCategory","getCategoryListNoPagination","category","navigate","slug","ListComponent","selectors","loadChildren","r","then","m","DetailModule","data","breadcrumb","ListRoutingModule","RouterModule","ListModule","CommonModule","MatCheckboxModule","ReactiveFormsModule","FormsModule","LoadingSpinnerModule","MAT_CHECKBOX_DEFAULT_OPTIONS","InjectionToken","providedIn","MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY","color","clickAction","nextUniqueId","defaults","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatCheckbox","multi","_MatCheckboxBase","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","_elementRef","elementRef","_changeDetectorRef","_focusMonitor","_ngZone","tabIndex","_animationMode","_options","super","ariaLabel","ariaLabelledby","_uniqueId","id","labelPosition","name","change","EventEmitter","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","_controlValueAccessorChangeFn","_checked","_disabled","_indeterminate","defaultColor","parseInt","inputId","required","_required","value","coerceBooleanProperty","ngAfterViewInit","monitor","focusOrigin","Promise","markForCheck","_syncIndeterminate","ngAfterViewChecked","stopMonitoring","checked","disabled","newValue","indeterminate","changed","_transitionCheckState","emit","_isRippleDisabled","disableRipple","_onLabelTextChange","detectChanges","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_getAriaChecked","newState","oldState","element","nativeElement","length","classList","remove","_getAnimationClassForCheckStateTransition","add","animationClass","runOutsideAngular","setTimeout","_emitChangeEvent","event","MatCheckboxChange","source","_inputElement","toggle","_onInputClick","_a","stopPropagation","focus","origin","options","focusVia","_onInteractionEvent","animSuffix","nativeCheckbox","ɵfac","i1","ANIMATION_MODULE_TYPE","ɵcmp","L","MatRipple","s","i","ngContentSelectors","directives","i2","i3","styles","_MatCheckboxRequiredValidatorModule","ɵmod","ɵinj","MatRippleModule","MatCommonModule","ObserversModule"],"sources":["./src/app/common/resolver/params-item.resolver.ts","./src/app/pages/list/list.component.html","./src/app/pages/list/list-routing.module.ts","./src/app/pages/list/list.component.ts","./src/app/pages/list/list.module.ts","./node_modules/@angular/material/fesm2015/checkbox.mjs"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, Resolve, RouterStateSnapshot, ActivatedRouteSnapshot } from '@angular/router';\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ParamsItemResolver implements Resolve<boolean> {\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n        return of(route.params.item);\n    }\n}\n","<ng-container *ngIf=\"checkList$ | async as checkList; else loadingOrError\">\n    <ng-container *ngIf=\"checkList.length > 0; else noData\">\n        <div class=\"divide-y\">\n            <div\n                *ngFor=\"let item of checkList; let i = index\"\n                class=\"py-3 space-x-2 text-sky-500\"\n                [class.checked]=\"item.isDone\"\n            >\n                <mat-checkbox\n                    [(ngModel)]=\"itemCheckboxList[i].isDone\"\n                    (ngModelChange)=\"onCheckboxChanges(itemCheckboxList[i])\"\n                >\n                </mat-checkbox>\n                <a\n                    [ngClass]=\"{ done: itemCheckboxList[i].isDone }\"\n                    [routerLink]=\"['./', item.slug]\"\n                    >{{ item.name }}</a\n                >\n            </div>\n        </div>\n    </ng-container>\n</ng-container>\n<!-- Loading template -->\n<ng-template #loadingOrError>\n    <div *ngIf=\"loadingError$ | async; else loading\">error</div>\n    <ng-template #loading>\n        <app-loading-spinner></app-loading-spinner>\n    </ng-template>\n</ng-template>\n\n<ng-template #noData> No data </ng-template>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ParamsItemResolver } from 'src/app/common/resolver/params-item.resolver';\nimport { ListComponent } from './list.component';\n\nconst routes: Routes = [\n    { path: '', component: ListComponent },\n    {\n        path: ':item',\n        loadChildren: () => import('../detail/detail.module').then((m) => m.DetailModule),\n        data: { breadcrumb: (data: any) => data.item },\n        resolve: { item: ParamsItemResolver },\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class ListRoutingModule {}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    OnDestroy,\n    OnInit,\n} from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { EMPTY, iif, Observable, of, Subject } from 'rxjs';\nimport { catchError, finalize, map, startWith, switchMap, tap } from 'rxjs/operators';\nimport { Item } from 'src/app/common/schema/item';\nimport { ApiCategoryAbstractService } from 'src/app/common/service/api/abstract/category.abstract.service';\nimport { ApiPageListService } from 'src/app/common/service/api/page/api-page-list.service';\nimport { SidenavService } from 'src/app/common/service/sidenav.service';\nimport { SubSink } from 'subsink';\nimport { ApiItemAbstractService } from 'src/app/common/service/api/abstract/item.abstract.service';\n\ninterface checkboxItem {\n    _id: string;\n    isDone: boolean;\n    categoryID: string;\n}\n\n@Component({\n    selector: 'app-list',\n    templateUrl: './list.component.html',\n    styleUrls: ['./list.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ListComponent implements OnInit, OnDestroy {\n    // private _subs = new SubSink();\n\n    public checkList$!: Observable<Item[] | undefined>;\n    public itemCheckboxList: checkboxItem[] = [];\n    public loadingError$ = new Subject<boolean>();\n\n    constructor(\n        private _activatedRoute: ActivatedRoute,\n        private _apiPageListService: ApiPageListService,\n        private _categoryService: ApiCategoryAbstractService,\n        private _itemService: ApiItemAbstractService,\n        private _router: Router,\n        private _snackbar: MatSnackBar,\n        private _sidenavService: SidenavService\n    ) {}\n\n    ngOnInit(): void {\n        // Params\n        this.checkList$ = this._activatedRoute.params.pipe(\n            // Get content base on category\n            switchMap((params) => {\n                if (!params.section) {\n                    this.onCategoryNotFound();\n                    return of([]);\n                }\n\n                return this._apiPageListService.getCategoryItemByCategorySlug(params.section).pipe(\n                    startWith([]),\n                    catchError((error) => {\n                        console.error(error);\n                        this.loadingError$.next(true);\n                        this._snackbar.open(error.message, 'Dismiss', {\n                            duration: 2000,\n                        });\n                        this.onCategoryNotFound();\n                        return of([]);\n                    })\n                );\n            }),\n            tap((itemList: Item[]) => {\n                if (!itemList) console.log('No item list');\n                this.itemCheckboxList = itemList.map((item) => {\n                    return {\n                        _id: item._id,\n                        isDone: item.isDone,\n                        categoryID: item.categoryID,\n                    };\n                });\n            })\n        );\n    }\n\n    ngOnDestroy(): void {\n        // this._subs.unsubscribe();\n    }\n\n    onCheckboxChanges(item: checkboxItem): void {\n        this._itemService.patchItem(item, item.categoryID).subscribe(() => {\n            this._sidenavService.remindToReloadCategory();\n\n            this._snackbar.open('Item updated', 'Dismiss', {\n                duration: 2000,\n            });\n        });\n    }\n\n    onCategoryNotFound(): void {\n        this._categoryService.getCategoryListNoPagination().subscribe((category) => {\n            this._router.navigate(['/checklist/', category[0].slug]);\n        });\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { ListRoutingModule } from './list-routing.module';\nimport { ListComponent } from './list.component';\n\n// Import Material Components\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { LoadingSpinnerModule } from 'src/app/shared-components/loading-spinner/loading-spinner.module';\n\n@NgModule({\n    declarations: [ListComponent],\n    imports: [\n        CommonModule,\n        ListRoutingModule,\n        MatCheckboxModule,\n        ReactiveFormsModule,\n        FormsModule,\n        LoadingSpinnerModule,\n    ],\n})\nexport class ListModule {}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Optional, Inject, Input, Output, ViewChild, Directive, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport * as i2 from '@angular/material/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i1 from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-checkbox`. */\nconst MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken('mat-checkbox-default-options', {\n    providedIn: 'root',\n    factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent',\n        clickAction: 'check-indeterminate',\n    };\n}\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n// Default checkbox configuration.\nconst defaults = MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY();\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatCheckbox),\n    multi: true,\n};\n/** Change event object emitted by MatCheckbox. */\nclass MatCheckboxChange {\n}\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nconst _MatCheckboxBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}))));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nclass MatCheckbox extends _MatCheckboxBase {\n    constructor(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _animationMode, _options) {\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._animationMode = _animationMode;\n        this._options = _options;\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n         * take precedence so this may be omitted.\n         */\n        this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._uniqueId = `mat-checkbox-${++nextUniqueId}`;\n        /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n        this.id = this._uniqueId;\n        /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n        this.labelPosition = 'after';\n        /** Name value will be applied to the input element if present */\n        this.name = null;\n        /** Event emitted when the checkbox's `checked` value changes. */\n        this.change = new EventEmitter();\n        /** Event emitted when the checkbox's `indeterminate` value changes. */\n        this.indeterminateChange = new EventEmitter();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * @docs-private\n         */\n        this._onTouched = () => { };\n        this._currentAnimationClass = '';\n        this._currentCheckState = 0 /* Init */;\n        this._controlValueAccessorChangeFn = () => { };\n        this._checked = false;\n        this._disabled = false;\n        this._indeterminate = false;\n        this._options = this._options || defaults;\n        this.color = this.defaultColor = this._options.color || defaults.color;\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() {\n        return `${this.id || this._uniqueId}-input`;\n    }\n    /** Whether the checkbox is required. */\n    get required() {\n        return this._required;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n            if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state change\n                // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n                // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n                // telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => {\n                    this._onTouched();\n                    this._changeDetectorRef.markForCheck();\n                });\n            }\n        });\n        this._syncIndeterminate(this._indeterminate);\n    }\n    // TODO: Delete next major revision.\n    ngAfterViewChecked() { }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Whether the checkbox is checked.\n     */\n    get checked() {\n        return this._checked;\n    }\n    set checked(value) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this.disabled) {\n            this._disabled = newValue;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    get indeterminate() {\n        return this._indeterminate;\n    }\n    set indeterminate(value) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = coerceBooleanProperty(value);\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(3 /* Indeterminate */);\n            }\n            else {\n                this._transitionCheckState(this.checked ? 1 /* Checked */ : 2 /* Unchecked */);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n        this._syncIndeterminate(this._indeterminate);\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n        // component will be only marked for check, but no actual change detection runs automatically.\n        // Instead of going back into the zone in order to trigger a change detection which causes\n        // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n        // an explicit change detection for the checkbox view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    _getAriaChecked() {\n        if (this.checked) {\n            return 'true';\n        }\n        return this.indeterminate ? 'mixed' : 'false';\n    }\n    _transitionCheckState(newState) {\n        let oldState = this._currentCheckState;\n        let element = this._elementRef.nativeElement;\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n            // Remove the animation class to avoid animation when the checkbox is moved between containers\n            const animationClass = this._currentAnimationClass;\n            this._ngZone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    element.classList.remove(animationClass);\n                }, 1000);\n            });\n        }\n    }\n    _emitChangeEvent() {\n        const event = new MatCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n        // Assigning the value again here is redundant, but we have to do it in case it was\n        // changed inside the `change` listener which will cause the input to be out of sync.\n        if (this._inputElement) {\n            this._inputElement.nativeElement.checked = this.checked;\n        }\n    }\n    /** Toggles the `checked` state of the checkbox. */\n    toggle() {\n        this.checked = !this.checked;\n    }\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event) {\n        var _a;\n        const clickAction = (_a = this._options) === null || _a === void 0 ? void 0 : _a.clickAction;\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && clickAction !== 'check') {\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n            this.toggle();\n            this._transitionCheckState(this._checked ? 1 /* Checked */ : 2 /* Unchecked */);\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n        else if (!this.disabled && clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mat-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n    /** Focuses the checkbox. */\n    focus(origin, options) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    _onInteractionEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    _getAnimationClassForCheckStateTransition(oldState, newState) {\n        // Don't transition if animations are disabled.\n        if (this._animationMode === 'NoopAnimations') {\n            return '';\n        }\n        let animSuffix = '';\n        switch (oldState) {\n            case 0 /* Init */:\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                // [checked] bound to it.\n                if (newState === 1 /* Checked */) {\n                    animSuffix = 'unchecked-checked';\n                }\n                else if (newState == 3 /* Indeterminate */) {\n                    animSuffix = 'unchecked-indeterminate';\n                }\n                else {\n                    return '';\n                }\n                break;\n            case 2 /* Unchecked */:\n                animSuffix =\n                    newState === 1 /* Checked */\n                        ? 'unchecked-checked'\n                        : 'unchecked-indeterminate';\n                break;\n            case 1 /* Checked */:\n                animSuffix =\n                    newState === 2 /* Unchecked */\n                        ? 'checked-unchecked'\n                        : 'checked-indeterminate';\n                break;\n            case 3 /* Indeterminate */:\n                animSuffix =\n                    newState === 1 /* Checked */\n                        ? 'indeterminate-checked'\n                        : 'indeterminate-unchecked';\n                break;\n        }\n        return `mat-checkbox-anim-${animSuffix}`;\n    }\n    /**\n     * Syncs the indeterminate value with the checkbox DOM node.\n     *\n     * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n     * property is supported on an element boils down to `if (propName in element)`. Domino's\n     * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n     * server-side rendering.\n     */\n    _syncIndeterminate(value) {\n        const nativeCheckbox = this._inputElement;\n        if (nativeCheckbox) {\n            nativeCheckbox.nativeElement.indeterminate = value;\n        }\n    }\n}\nMatCheckbox.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatCheckbox, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.FocusMonitor }, { token: i0.NgZone }, { token: 'tabindex', attribute: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_CHECKBOX_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatCheckbox.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatCheckbox, selector: \"mat-checkbox\", inputs: { disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], id: \"id\", required: \"required\", labelPosition: \"labelPosition\", name: \"name\", value: \"value\", checked: \"checked\", disabled: \"disabled\", indeterminate: \"indeterminate\" }, outputs: { change: \"change\", indeterminateChange: \"indeterminateChange\" }, host: { properties: { \"id\": \"id\", \"attr.tabindex\": \"null\", \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"class.mat-checkbox-indeterminate\": \"indeterminate\", \"class.mat-checkbox-checked\": \"checked\", \"class.mat-checkbox-disabled\": \"disabled\", \"class.mat-checkbox-label-before\": \"labelPosition == \\\"before\\\"\", \"class._mat-animation-noopable\": \"_animationMode === 'NoopAnimations'\" }, classAttribute: \"mat-checkbox\" }, providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR], viewQueries: [{ propertyName: \"_inputElement\", first: true, predicate: [\"input\"], descendants: true }, { propertyName: \"ripple\", first: true, predicate: MatRipple, descendants: true }], exportAs: [\"matCheckbox\"], usesInheritance: true, ngImport: i0, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <span class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <span matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: _animationMode === 'NoopAnimations' ? 0 : 150}\\\">\\n      <span class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></span>\\n    </span>\\n    <span class=\\\"mat-checkbox-frame\\\"></span>\\n    <span class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           xml:space=\\\"preserve\\\"\\n           aria-hidden=\\\"true\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <span class=\\\"mat-checkbox-mixedmark\\\"></span>\\n    </span>\\n  </span>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-ripple{outline:solid 3px}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}\\n\"], directives: [{ type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }, { type: i3.CdkObserveContent, selector: \"[cdkObserveContent]\", inputs: [\"cdkObserveContentDisabled\", \"debounce\"], outputs: [\"cdkObserveContent\"], exportAs: [\"cdkObserveContent\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatCheckbox, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-checkbox', exportAs: 'matCheckbox', host: {\n                        'class': 'mat-checkbox',\n                        '[id]': 'id',\n                        '[attr.tabindex]': 'null',\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[class.mat-checkbox-indeterminate]': 'indeterminate',\n                        '[class.mat-checkbox-checked]': 'checked',\n                        '[class.mat-checkbox-disabled]': 'disabled',\n                        '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n                        '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n                    }, providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR], inputs: ['disableRipple', 'color', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <span class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <span matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: _animationMode === 'NoopAnimations' ? 0 : 150}\\\">\\n      <span class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></span>\\n    </span>\\n    <span class=\\\"mat-checkbox-frame\\\"></span>\\n    <span class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           xml:space=\\\"preserve\\\"\\n           aria-hidden=\\\"true\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <span class=\\\"mat-checkbox-mixedmark\\\"></span>\\n    </span>\\n  </span>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-ripple{outline:solid 3px}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_CHECKBOX_DEFAULT_OPTIONS]\n                    }] }];\n    }, propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], id: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], labelPosition: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }], indeterminateChange: [{\n                type: Output\n            }], value: [{\n                type: Input\n            }], _inputElement: [{\n                type: ViewChild,\n                args: ['input']\n            }], ripple: [{\n                type: ViewChild,\n                args: [MatRipple]\n            }], checked: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], indeterminate: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n    multi: true,\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\nMatCheckboxRequiredValidator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatCheckboxRequiredValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatCheckboxRequiredValidator.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatCheckboxRequiredValidator, selector: \"mat-checkbox[required][formControlName],\\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]\", providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatCheckboxRequiredValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n                    providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based checkbox implementations. */\nclass _MatCheckboxRequiredValidatorModule {\n}\n_MatCheckboxRequiredValidatorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n_MatCheckboxRequiredValidatorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule, declarations: [MatCheckboxRequiredValidator], exports: [MatCheckboxRequiredValidator] });\n_MatCheckboxRequiredValidatorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [MatCheckboxRequiredValidator],\n                    declarations: [MatCheckboxRequiredValidator],\n                }]\n        }] });\nclass MatCheckboxModule {\n}\nMatCheckboxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatCheckboxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatCheckboxModule, declarations: [MatCheckbox], imports: [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule], exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule] });\nMatCheckboxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatCheckboxModule, imports: [[MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule], MatCommonModule, _MatCheckboxRequiredValidatorModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatCheckboxModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule],\n                    exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n                    declarations: [MatCheckbox],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, MAT_CHECKBOX_DEFAULT_OPTIONS, MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckbox, MatCheckboxChange, MatCheckboxModule, MatCheckboxRequiredValidator, _MatCheckboxRequiredValidatorModule };\n"],"sourceRoot":"webpack:///","file":"515.e48cd8965c74883a.js"}