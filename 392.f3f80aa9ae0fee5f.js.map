{"version":3,"mappings":"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","names":["CustomDialogComponent","constructor","_fb","_cdr","_slugifyPipe","_dialogRef","data","this","SubSink","ngOnInit","updateSize","action","ActionType","title","submitText","form","group","name","Validators","slug","e","validateList","_a","bind","thisRef","completePercentage","description","_id","payload","autocompleteSlug","ngOnDestroy","_subs","unsubscribe","f","controls","submitForm","console","log","value","callback","markForCheck","add","valueChanges","pipe","filter","length","startWith","distinctUntilChanged","debounceTime","tap","setValue","transform","subscribe","i0","MAT_DIALOG_DATA","selectors","SlugifyPipe","decls","ctx","ctx_r4","ctx_r6","ctx_r7","routes","path","component","_categoryService","_dialog","_snackbar","columnDef","header","cell","element","BehaviorSubject","_page","categories$","categorySubject$","asObservable","switchMap","getCategoryList","map","totalItems","paginations","_totalRow","_sub","onActionTriggered","event","type","addCategory","editCategory","deleteCategory","onPaginationChange","pageIndex","_limit","pageSize","next","open","actionType","CREATE","onAddCategory","validateSlug","category","sink","duration","id","retrieveCategoryByID","EDIT","onEditCategory","updateCategory","confirmDialogRef","ConfirmDialogComponent","message","afterClosed","result","deleteCategoryByID","of","control","timer","retrieveCategoryBySlug","slugExists","CategoryComponent","CategoryRoutingModule","RouterModule","CustomDialogModule","CommonModule","ReactiveFormsModule","FormsModule","MatDialogModule","MatFormFieldModule","MatInputModule","MatButtonModule","SlugifyModule","ErrorMessageModule","ConfirmDialogModule","CategoryModule","DatatableModule","LoadingSpinnerModule"],"sources":["./src/app/shared-components/dialogs/custom-dialog/custom-dialog.component.ts","./src/app/shared-components/dialogs/custom-dialog/custom-dialog.component.html","./src/app/pages/admin/category/category.component.html","./src/app/pages/admin/category/category-routing.module.ts","./src/app/pages/admin/category/category.component.ts","./src/app/shared-components/dialogs/custom-dialog/custom-dialog.module.ts","./src/app/shared-components/dialogs/confirm-dialog/confirm-dialog.module.ts","./src/app/pages/admin/category/category.module.ts"],"sourcesContent":["import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Inject,\n    OnDestroy,\n    OnInit,\n} from '@angular/core';\nimport {\n    AbstractControl,\n    FormBuilder,\n    FormGroup,\n    ValidationErrors,\n    Validators,\n} from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Observable, Subject, Subscription } from 'rxjs';\nimport {\n    debounceTime,\n    delay,\n    distinctUntilChanged,\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\nimport { SlugifyPipe } from 'src/app/common/pipe/slugify/slugify.pipe';\nimport { ActionType } from 'src/app/common/schema/datatable/Action';\nimport { SubSink } from 'subsink';\n\nexport interface DialogData {\n    action: ActionType;\n    callback?: (data: any) => void;\n    validateList?: {\n        [key: string]: (control: AbstractControl) => Observable<ValidationErrors | null>;\n    };\n    thisRef?: any;\n    payload?: any;\n}\n\n@Component({\n    selector: 'app-custom-dialog',\n    templateUrl: './custom-dialog.component.html',\n    styleUrls: ['./custom-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [SlugifyPipe],\n})\nexport class CustomDialogComponent implements OnInit, OnDestroy {\n    public form!: FormGroup;\n\n    public title = '';\n    public submitText = 'OK';\n\n    private _subs = new SubSink();\n\n    constructor(\n        private _fb: FormBuilder,\n        private _cdr: ChangeDetectorRef,\n        private _slugifyPipe: SlugifyPipe,\n        private _dialogRef: MatDialogRef<CustomDialogComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: DialogData\n    ) {}\n\n    // Life cycle hooks\n    ngOnInit(): void {\n        this._dialogRef.updateSize('60%', 'fit-content');\n\n        switch (this.data.action) {\n            case ActionType.CREATE:\n                // https://stackoverflow.com/questions/2236747/what-is-the-use-of-the-javascript-bind-method\n                this.title = 'Create New Category';\n                this.submitText = 'Add';\n                this.form = this._fb.group({\n                    name: ['', [Validators.required]],\n                    slug: [\n                        '',\n                        [Validators.required],\n                        this.data.validateList?.slug.bind(this.data.thisRef),\n                    ],\n                    completePercentage: [0],\n                    description: [''],\n                });\n                break;\n            case ActionType.EDIT:\n                this.title = 'Edit Category';\n                this.submitText = 'Save';\n\n                this.form = this._fb.group({\n                    _id: [this.data.payload._id],\n                    name: [this.data.payload.name],\n                    slug: [this.data.payload.slug],\n                    // completePercentage: [this.data.payload.completePercentage],\n                    description: [this.data.payload.description],\n                });\n                break;\n        }\n\n        this.autocompleteSlug();\n    }\n\n    ngOnDestroy(): void {\n        this._subs.unsubscribe();\n    }\n\n    // Form Related Methods\n\n    // Form Gettter\n    get f(): { [key: string]: AbstractControl } {\n        return this.form.controls;\n    }\n\n    submitForm() {\n        console.log(this.data.action);\n        console.log(this.form.value);\n        this.data.callback?.bind(this.data.thisRef)(this.form.value);\n        this._cdr.markForCheck();\n    }\n\n    // Autocomplete slug field based on name field\n    autocompleteSlug() {\n        this._subs.add(\n            this.f.name.valueChanges\n                .pipe(\n                    filter((value) => value.length > 0),\n                    startWith(this.f.name.value),\n                    distinctUntilChanged(),\n                    debounceTime(500),\n                    tap((value) => {\n                        this.f.slug.setValue(this._slugifyPipe.transform(value));\n                    })\n                )\n                .subscribe()\n        );\n    }\n}\n","<form [formGroup]=\"form\" (ngSubmit)=\"submitForm()\">\n    <h1 mat-dialog-title>{{ title }}</h1>\n    <div class=\"dialog-content\" mat-dialog-content>\n        <mat-form-field appearance=\"fill\">\n            <mat-label>Name</mat-label>\n            <input formControlName=\"name\" matInput placeholder=\"Add name\" />\n            <!-- <mat-error *ngIf=\"f.name.errors\"></mat-error> -->\n            <mat-error matErrorMessage></mat-error>\n        </mat-form-field>\n\n        <mat-form-field appearance=\"fill\">\n            <mat-label>Slug</mat-label>\n            <input formControlName=\"slug\" matInput placeholder=\"Add slug\" />\n            <mat-error matErrorMessage></mat-error>\n        </mat-form-field>\n\n        <mat-form-field appearance=\"fill\">\n            <mat-label>Description</mat-label>\n            <textarea\n                formControlName=\"description\"\n                matInput\n                placeholder=\"Add description\"\n                matErrorMessage\n            ></textarea>\n            <mat-error></mat-error>\n        </mat-form-field>\n    </div>\n    <div mat-dialog-actions>\n        <button type=\"submit\" mat-button mat-dialog-close [disabled]=\"!form.valid\">\n            {{ submitText }}\n        </button>\n        <button type=\"button\" mat-button mat-dialog-close>Cancel</button>\n    </div>\n</form>\n","<div *ngIf=\"categories$ | async as categories\" class=\"container\">\n    <button\n        title=\"Add category\"\n        type=\"button\"\n        mat-raised-button\n        color=\"primary\"\n        (click)=\"onActionTriggered({ type: actionType.CREATE, payload: null })\"\n    >\n        Add Category\n    </button>\n\n    <app-datatable\n        [columns]=\"columns\"\n        [totalItems]=\"totalItems\"\n        [dataSource]=\"categories\"\n        [displayedColumns]=\"displayedColumn\"\n        [actions]=\"[actionType.EDIT, actionType.DELETE]\"\n        (onActionTriggered)=\"onActionTriggered($event)\"\n        (onPaginationChange)=\"onPaginationChange($event)\"\n    ></app-datatable>\n</div>\n\n<!-- Loading template -->\n<ng-template #loadingOrError>\n    <!-- <div *ngIf=\"loadingError$ | async; else loading\">error</div> -->\n    <ng-template #loading>\n        <app-loading-spinner></app-loading-spinner>\n    </ng-template>\n</ng-template>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CategoryComponent } from './category.component';\n\nconst routes: Routes = [{ path: '', component: CategoryComponent }];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n})\nexport class CategoryRoutingModule {}\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\nimport { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { BehaviorSubject, Observable, of, timer } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { Category, CategoryPostInterface } from 'src/app/common/schema/category';\nimport { ActionType } from 'src/app/common/schema/datatable/Action';\nimport { Column } from 'src/app/common/schema/datatable/Column';\nimport { ApiCategoryAbstractService } from 'src/app/common/service/api/abstract/category.abstract.service';\n\nimport { CustomDialogComponent } from 'src/app/shared-components/dialogs/custom-dialog/custom-dialog.component';\nimport { ConfirmDialogComponent } from 'src/app/shared-components/dialogs/confirm-dialog/confirm-dialog.component';\nimport { SubSink } from 'subsink';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { GetListFilter } from 'src/app/common/schema/datatable/Filter';\nimport { PageEvent } from '@angular/material/paginator';\n\nexport interface PeriodicElement {\n    id: number;\n    name: string;\n    completePercentage: number;\n    slug: string;\n    description: string;\n}\n\n@Component({\n    selector: 'app-category',\n    templateUrl: './category.component.html',\n    styleUrls: ['./category.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CategoryComponent implements OnInit, OnDestroy {\n    private _sub = new SubSink();\n    public actionType = ActionType;\n    public categories$!: Observable<Category[]>;\n    public displayedColumn = ['#', 'name', 'slug', 'completePercentage'];\n    public columns: Column[] = [\n        // {\n        //     columnDef: '_id',\n        //     header: 'ID',\n        //     cell: (element: any) => `${element._id}`,\n        // },\n        {\n            columnDef: '#',\n            header: 'No.',\n            cell: (element: any) => '0',\n        },\n        {\n            columnDef: 'name',\n            header: 'Name',\n            cell: (element: any) => `${element.name}`,\n        },\n        {\n            columnDef: 'slug',\n            header: 'Slug',\n            cell: (element: any) => `${element.slug}`,\n        },\n        {\n            columnDef: 'completePercentage',\n            header: 'Complete Percentage',\n            cell: (element: any) => `${element.completePercentage}`,\n        },\n    ];\n    public categorySubject$ = new BehaviorSubject<boolean>(true);\n\n    public filter: GetListFilter = {\n        _page: 1,\n    };\n    public totalItems: number = 0;\n\n    constructor(\n        private _categoryService: ApiCategoryAbstractService,\n        private _dialog: MatDialog,\n        private _snackbar: MatSnackBar\n    ) {}\n\n    // ---------- CYCLE HOOKS ---------- //\n    ngOnInit(): void {\n        // Use BehaviorSubject to notify the table to update\n        this.categories$ = this.categorySubject$.asObservable().pipe(\n            switchMap(() => {\n                return this._categoryService.getCategoryList(this.filter).pipe(\n                    map((data: any) => {\n                        this.totalItems = data.paginations._totalRow;\n                        return data.data;\n                    })\n                );\n            })\n        );\n    }\n\n    ngOnDestroy(): void {\n        this._sub.unsubscribe();\n    }\n\n    // ---------- MAIN FUNCTION ---------- //\n    onActionTriggered(event: any): void {\n        let { type, payload } = event;\n\n        switch (type) {\n            case ActionType.CREATE:\n                this.addCategory();\n                break;\n\n            case ActionType.EDIT:\n                this.editCategory(payload);\n                break;\n\n            case ActionType.DELETE:\n                this.deleteCategory(payload);\n                break;\n        }\n    }\n\n    onPaginationChange(event: PageEvent): void {\n        this.filter._page = event.pageIndex + 1;\n        this.filter._limit = event.pageSize;\n        this.categorySubject$.next(true);\n    }\n\n    // ---------- CREATE ---------- //\n    addCategory(): void {\n        // https://stackoverflow.com/questions/2236747/what-is-the-use-of-the-javascript-bind-method\n        this._dialog.open(CustomDialogComponent, {\n            data: {\n                action: this.actionType.CREATE,\n                callback: this.onAddCategory,\n                validateList: {\n                    slug: this.validateSlug,\n                },\n                thisRef: this,\n            },\n        });\n    }\n\n    onAddCategory(category: CategoryPostInterface): void {\n        this._sub.sink = this._categoryService.addCategory(category).subscribe((category) => {\n            this.categorySubject$.next(true);\n            this._snackbar.open('Category added', 'Dismiss', { duration: 2000 });\n        });\n    }\n\n    // ---------- EDIT ---------- //\n    editCategory(id: string): void {\n        this._sub.sink = this._categoryService\n            .retrieveCategoryByID(id)\n            .subscribe((category: any) => {\n                this._dialog.open(CustomDialogComponent, {\n                    data: {\n                        action: this.actionType.EDIT,\n                        payload: category,\n                        callback: this.onEditCategory,\n                        thisRef: this,\n                    },\n                });\n            });\n    }\n\n    onEditCategory(category: Category): void {\n        this._sub.sink = this._categoryService.updateCategory(category).subscribe((category) => {\n            this.categorySubject$.next(true);\n            this._snackbar.open('Category updated', 'Dismiss', { duration: 2000 });\n        });\n    }\n\n    // ---------- DELETE ---------- //\n    deleteCategory(category: Category): void {\n        console.log(category);\n\n        let confirmDialogRef = this._dialog.open(ConfirmDialogComponent, {\n            data: {\n                title: 'Delete Category',\n                message: 'Are you sure you want to delete this category?',\n                submitText: 'Delete',\n            },\n        });\n\n        this._sub.sink = confirmDialogRef\n            .afterClosed()\n            .pipe(\n                switchMap((result) => {\n                    return result === 'Confirmed'\n                        ? this._categoryService.deleteCategoryByID(category._id)\n                        : of(null);\n                })\n            )\n            .subscribe((data) => {\n                this.categorySubject$.next(true);\n                this._snackbar.open('Category deleted', 'Dismiss', { duration: 2000 });\n            });\n    }\n\n    // ---------- HELPER ---------- //\n\n    // Async validator that checks if the slug is unique when category is created\n    // Note: Cannot use debounceTime, distinctUntilChanged or delay\n    validateSlug(control: AbstractControl): Observable<ValidationErrors | null> {\n        return timer(300).pipe(\n            switchMap(() =>\n                this._categoryService.retrieveCategoryBySlug(control.value).pipe(\n                    map((category: [Category]) => {\n                        return category[0] ? { slugExists: true } : null;\n                    })\n                )\n            )\n        );\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CustomDialogComponent } from './custom-dialog.component';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n// Import Material Modules\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { SlugifyModule } from 'src/app/common/pipe/slugify/slugify.module';\nimport { ErrorMessageModule } from '../../error-message/error-message.module';\n\n@NgModule({\n    declarations: [CustomDialogComponent],\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        FormsModule,\n        MatDialogModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatButtonModule,\n        SlugifyModule,\n        ErrorMessageModule,\n    ],\n})\nexport class CustomDialogModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ConfirmDialogComponent } from './confirm-dialog.component';\n\n// Import Material modules\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\n\n@NgModule({\n    declarations: [ConfirmDialogComponent],\n    imports: [CommonModule, MatButtonModule, MatDialogModule],\n})\nexport class ConfirmDialogModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CategoryRoutingModule } from './category-routing.module';\nimport { CategoryComponent } from './category.component';\nimport { DatatableModule } from 'src/app/shared-components/datatable/datatable.module';\nimport { LoadingSpinnerModule } from 'src/app/shared-components/loading-spinner/loading-spinner.module';\n\n// Dialogs\nimport { CustomDialogModule } from 'src/app/shared-components/dialogs/custom-dialog/custom-dialog.module';\nimport { ConfirmDialogModule } from 'src/app/shared-components/dialogs/confirm-dialog/confirm-dialog.module';\n\n// Import Material modules\nimport { MatButtonModule } from '@angular/material/button';\n\n@NgModule({\n    declarations: [CategoryComponent],\n    imports: [\n        CommonModule,\n        CategoryRoutingModule,\n        DatatableModule,\n        MatButtonModule,\n        CustomDialogModule,\n        ConfirmDialogModule,\n        LoadingSpinnerModule,\n    ],\n})\nexport class CategoryModule {}\n"],"sourceRoot":"webpack:///","file":"392.f3f80aa9ae0fee5f.js"}