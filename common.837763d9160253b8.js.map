{"version":3,"mappings":"4KAcO,IAAMA,EAAb,MAAM,QACFC,YAAoBC,EAA8BC,GAA9BC,YAA8BA,wBAElDC,YAAYC,GACR,IAAIC,EAAa,IAAIC,KAAW,CAAEC,WAAYH,IAC9C,OAAOF,KAAKF,KAAKQ,IAAI,OAAQ,CAAEC,OAAQJ,IAG3CK,aAAaC,GACT,OAAOT,KAAKF,KAAKQ,IAAI,QAAQG,KAGjCC,mBAAmBC,GACf,OAAOX,KAAKF,KAAKQ,IAAI,aAAaK,KAGtCC,QAAQC,GACJ,OAAOb,KAAKF,KAAKgB,KAAK,OAAQD,GAAME,MAChCC,OAAS,KACLhB,KAAKD,iBAAiBkB,uCAAuCJ,EAAKK,eAK9EC,WAAWN,GACP,OAAOb,KAAKF,KAAKsB,IAAI,QAAQP,EAAKQ,MAAOR,GAG7CS,UAAUT,EAAqBK,GAC3B,OAAOlB,KAAKF,KAAKyB,MAAM,QAAQV,EAAKQ,MAAOR,GAG/CW,eAAef,EAAYS,GACvB,OAAOlB,KAAKF,KAAK2B,OAAO,QAAQhB,KAAMM,MAClCC,OAAS,KACLhB,KAAKD,iBAAiBkB,uCAAuCC,oDAnChEtB,GAAsB8B,kDAAtB9B,EAAsB+B,QAAtB/B,EAAsB,qBAFnB,SAEHA,GAAb,4DCTO,IAAMgC,EAAb,MAAM,QACF/B,cAGOG,cAAYO,IAEfA,EAAOsB,QAASC,GAAWA,EAAMC,MAAQC,mBAAmBF,EAAMC,MAAME,aAEjE1B,EAAO2B,IAAKJ,GAAU,GAAGA,EAAMK,OAAOL,EAAMC,SAASK,KAAK,oDAR5DR,gCAAwBD,QAAxBC,EAAwB,qBAFrB,SAEHA,GAAb,iBCQO,IAAMS,EAAb,MAAM,QACFxC,YACYyC,EACAC,EACAC,GAFAxC,uBACAA,iCACAA,wBAQLA,4BAA0ByC,GACtBzC,KAAKsC,gBAAgBhC,IAAI,mBAAmBmC,KAGhDzC,4CAA0CkB,IAC7ClB,KAAK0C,uBAAuBxB,GAAYyB,UAAWC,IAC/C,MAAMC,EAAQD,EAAKE,OACnB,IAAIC,EAAW,EAEfH,EAAKf,QAAShB,IACNA,EAAKmC,QACLD,MAIR,MAAME,EAAqBC,KAAKC,MAAOJ,EAAWF,EAAS,KAE3D7C,KAAKwC,iBACAY,cAAc,CAAE/B,IAAKH,EAAY+B,uBACjCN,eAIN3C,gDAA6C,KAChDA,KAAKwC,iBAAiBa,8BAA8BV,UAAWC,IAC3DA,EAAKf,QAASyB,IACVtD,KAAKiB,uCAAuCqC,EAASjC,UA9B1DkC,8BAA8BC,GACjC,OAAOxD,KAAKsC,gBAAgBhC,IAAI,qBAAqBkD,mDAThDnB,GAAkBX,2DAAlBW,EAAkBV,QAAlBU,EAAkB,qBAFf,SAEHA,GAAb","names":["ApiItemAbstractService","constructor","_api","_listPageService","this","getItemList","filter","queryParam","HttpParams","fromObject","get","params","retrieveItem","id","retrieveItemBySlug","slug","addItem","item","post","pipe","finalize","calculateCompletePercentageOfACategory","categoryID","updateItem","put","_id","patchItem","patch","deleteItemByID","delete","i0","factory","QueryStringParamsService","forEach","param","value","encodeURIComponent","toString","map","key","join","ApiPageListService","_apiHttpService","_queryStringParamsService","_categoryService","category_id","getContentByCategoryId","subscribe","data","total","length","complete","isDone","completePercentage","Math","round","patchCategory","getCategoryListNoPagination","category","getCategoryItemByCategorySlug","categorySlug"],"sources":["./src/app/common/service/api/abstract/item.abstract.service.ts","./src/app/common/service/api/query-string-params.service.ts","./src/app/common/service/api/page/api-page-list.service.ts"],"sourcesContent":["import { HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport { GetListFilter } from '../../../schema/datatable/Filter';\nimport { PaginationInterface } from '../../../schema/general-schema';\nimport { Item, ItemPostInterface } from '../../../schema/item';\nimport { ApiCategoryAbstractService } from '../abstract/category.abstract.service';\nimport { ApiHttpService } from '../api-http.service';\nimport { ApiPageListService } from '../page/api-page-list.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ApiItemAbstractService {\n    constructor(private _api: ApiHttpService, private _listPageService: ApiPageListService) {}\n\n    getItemList(filter: GetListFilter): Observable<PaginationInterface<Item[]>> {\n        let queryParam = new HttpParams({ fromObject: filter as {} });\n        return this._api.get('item', { params: queryParam });\n    }\n\n    retrieveItem(id: string): Observable<[Item]> {\n        return this._api.get(`item/${id}`);\n    }\n\n    retrieveItemBySlug(slug: string): Observable<[Item] | []> {\n        return this._api.get(`item?slug=${slug}`);\n    }\n\n    addItem(item: ItemPostInterface): Observable<Item> {\n        return this._api.post('item', item).pipe(\n            finalize(() => {\n                this._listPageService.calculateCompletePercentageOfACategory(item.categoryID);\n            })\n        );\n    }\n\n    updateItem(item: Item): Observable<Item> {\n        return this._api.put(`item/${item._id}`, item);\n    }\n\n    patchItem(item: Partial<Item>, categoryID: string): Observable<Item> {\n        return this._api.patch(`item/${item._id}`, item);\n    }\n\n    deleteItemByID(id: string, categoryID: string): Observable<Item> {\n        return this._api.delete(`item/${id}`).pipe(\n            finalize(() => {\n                this._listPageService.calculateCompletePercentageOfACategory(categoryID);\n            })\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class QueryStringParamsService {\n    constructor() {}\n\n    // Take an array of key-value pairs and return a query string\n    public toString = (params: { key: string; value: Object }[]): string => {\n        // Encode the values to avoid special characters\n        params.forEach((param) => (param.value = encodeURIComponent(param.value.toString())));\n\n        return params.map((param) => `${param.key}=${param.value}`).join('&');\n    };\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, delay, map, switchMap, tap } from 'rxjs/operators';\nimport { LoadingSpinnerComponent } from 'src/app/shared-components/loading-spinner/loading-spinner.component';\nimport { ErrorMessage } from '../../../constants/error-message';\nimport { Item } from '../../../schema/item';\nimport { ApiCategoryAbstractService } from '../abstract/category.abstract.service';\nimport { ApiHttpService } from '../api-http.service';\nimport { QueryStringParamsService } from '../query-string-params.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ApiPageListService {\n    constructor(\n        private _apiHttpService: ApiHttpService,\n        private _queryStringParamsService: QueryStringParamsService,\n        private _categoryService: ApiCategoryAbstractService\n    ) {}\n\n    // Get content base on category slug.\n    public getCategoryItemByCategorySlug(categorySlug: string): Observable<Item[]> {\n        return this._apiHttpService.get(`item?categorySlug=${categorySlug}`);\n    }\n\n    public getContentByCategoryId = (category_id: string): Observable<Item[]> => {\n        return this._apiHttpService.get(`item?categoryID=${category_id}`);\n    };\n\n    public calculateCompletePercentageOfACategory = (categoryID: string): void => {\n        this.getContentByCategoryId(categoryID).subscribe((data) => {\n            const total = data.length;\n            let complete = 0;\n\n            data.forEach((item) => {\n                if (item.isDone) {\n                    complete++;\n                }\n            });\n\n            const completePercentage = Math.round((complete / total) * 100);\n\n            this._categoryService\n                .patchCategory({ _id: categoryID, completePercentage })\n                .subscribe();\n        });\n    };\n\n    public calculateCompletePercentageOfAllCategories = (): void => {\n        this._categoryService.getCategoryListNoPagination().subscribe((data) => {\n            data.forEach((category) => {\n                this.calculateCompletePercentageOfACategory(category._id);\n            });\n        });\n    };\n}\n"],"sourceRoot":"webpack:///","file":"common.837763d9160253b8.js"}