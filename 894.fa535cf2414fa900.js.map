{"version":3,"mappings":"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","names":["SlugifyModule","CommonModule","SlugifyPipe","transform","input","toString","toLowerCase","replace","pure","ActionType","OrderNumberPipe","rowIndex","pageIndex","pageSize","i0","ctx_r32","ctx_r35","ctx_r38","DatatableComponent","constructor","_cdr","_zone","this","EventEmitter","MatTableDataSource","ngOnChanges","changes","data","f","dataSource","_a","ngOnInit","actions","length","displayedColumns","ngAfterViewInit","actionTriggered","type","payload","onActionTriggered","emit","pageChange","event","onPaginationChange","selectors","MatTable","MatPaginator","ctx","OrderNumberModule","DatatableModule","MatTableModule","MatPaginatorModule","MatIconModule","MatButtonModule","MatTooltipModule","LoadingSpinnerModule","ConfirmDialogComponent","MAT_DIALOG_DATA","defaultErrors","required","error","minlength","requiredLength","slugExists","FORM_ERRORS","InjectionToken","providedIn","factory","ErrorMessageComponent","_inj","errors","renderer","Subscription","container","get","MatFormField","_inputRef","_control","_subscription","add","N","b","ngControl","statusChanges","_b","subscribe","state","updateError","I","addClass","_elementRef","nativeElement","controlErrors","$","firstKey","Object","keys","getError","classList","remove","ErrorMessageModule","MatFormFieldModule","listenerOptions","normalizePassiveListenerOptions","passive","AutofillMonitor","_platform","_ngZone","_monitoredElements","Map","monitor","elementOrRef","isBrowser","EMPTY","element","coerceElement","info","subject","result","Subject","cssClass","listener","animationName","contains","run","next","target","isAutofilled","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","stopMonitoring","complete","delete","ngOnDestroy","forEach","_info","ɵfac","i1","ɵprov","TextFieldModule","ɵmod","ɵinj","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","nextUniqueId","_MatInputBase","mixinErrorState","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","MatInput","inputValueAccessor","_autofillMonitor","ngZone","_formField","super","_uid","focused","stateChanges","controlType","autofilled","_disabled","_type","_readonly","_neverEmptyInputTypes","filter","t","getSupportedInputTypes","has","nodeName","_inputValueAccessor","_previousNativeValue","value","id","IOS","el","selectionStart","selectionEnd","setSelectionRange","_isServer","_isNativeSelect","_isTextarea","_isInFormField","multiple","disabled","coerceBooleanProperty","_id","_c","_d","_required","control","hasValidator","Validators","_validateType","readonly","ngDoCheck","updateErrorState","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","focus","options","_focusChanged","isFocused","_onInput","placeholder","_hideControlPlaceholder","call","_previousPlaceholder","setAttribute","removeAttribute","newValue","indexOf","_isNeverEmpty","_isBadInput","validity","badInput","empty","shouldLabelFloat","selectElement","firstOption","selectedIndex","label","setDescribedByIds","ids","join","onContainerClick","_isInlineSelect","size","i2","i3","i4","MAT_FORM_FIELD","ɵdir","g","provide","MatFormFieldControl","useExisting","MatInputModule","ErrorStateMatcher","imports","MatCommonModule","h","s","_changePageSize","firstPage","lastPage","MatPaginatorIntl","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","page","startIndex","Math","max","min","MAT_PAGINATOR_INTL_PROVIDER","deps","Optional","SkipSelf","useFactory","parentIntl","MAT_PAGINATOR_DEFAULT_OPTIONS","_MatPaginatorMixinBase","mixinDisabled","mixinInitialized","_MatPaginatorBase","_intl","_changeDetectorRef","defaults","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","markForCheck","pageSizeOptions","hidePageSize","showFirstLastButtons","_pageSize","coerceNumberProperty","_updateDisplayedPageSizeOptions","map","p","_initialized","_markInitialized","unsubscribe","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","getNumberOfPages","maxPageIndex","ceil","floor","_nextButtonsDisabled","_previousButtonsDisabled","_displayedPageSizeOptions","slice","push","sort","a","inputs","intl","changeDetectorRef","formFieldAppearance","_formFieldAppearance","ɵcmp","decls","C","directives","i5","i6","i7","styles","MatSelectModule","base","args","_sticky","_hasStickyChanged","sticky","v","prevValue","hasStickyChanged","resetStickyChanged","CDK_TABLE","CdkCellDef","template","CdkHeaderCellDef","CdkFooterCellDef","_CdkColumnDefBase","mixinHasStickyInput","CdkColumnDefBase","CdkColumnDef","_table","_stickyEnd","name","_name","_setNameInput","stickyEnd","_updateColumnCssClassName","_columnCssClassName","cssClassFriendlyName","c","o","columnDef","elementRef","CdkHeaderCell","BaseCdkCell","CdkCell","nodeType","tableRole","getAttribute","tasks","endTasks","_COALESCED_STYLE_SCHEDULER","_CoalescedStyleScheduler","_currentSchedule","_destroyed","schedule","task","_createScheduleIfNeeded","scheduleEnd","_Schedule","_getScheduleObservable","pipe","takeUntil","isStable","from","Promise","resolve","undefined","onStable","take","BaseRowDef","_differs","_columnsDiffer","columns","currentValue","find","create","diff","getColumnsDiff","extractCellTemplate","column","CdkHeaderRowDef","headerCell","CdkFooterRowDef","footerCell","cell","features","_CdkHeaderRowDefBase","CdkHeaderRowDefBase","_CdkFooterRowDefBase","CdkFooterRowDefBase","CdkRowDef","CdkCellOutlet","_viewContainer","mostRecentCellOutlet","CdkHeaderRow","encapsulation","CdkRow","CdkNoDataRow","templateRef","_contentClassName","STICKY_DIRECTIONS","_isNativeHtmlTable","_stickCellCss","direction","_coalescedStyleScheduler","_isBrowser","_needsPositionStickyOnElement","_positionListener","_cachedCellWidths","_borderCellCss","top","bottom","left","right","clearStickyPositioning","rows","stickyDirections","elementsToClear","row","ELEMENT_NODE","i","children","_removeStickyStyle","updateStickyColumns","stickyStartStates","stickyEndStates","recalculateCellWidths","some","stickyColumnsUpdated","sizes","stickyEndColumnsUpdated","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","lastStickyStart","lastIndexOf","firstStickyEnd","isRtl","start","end","_addStickyStyle","width","index","reverse","stickRows","rowsToStick","stickyStates","position","states","stickyOffsets","stickyCellHeights","elementsToStick","stickyOffset","Array","height","getBoundingClientRect","borderedRowIndex","offset","isBorderedRowIndex","stickyHeaderRowsUpdated","offsets","elements","stickyFooterRowsUpdated","updateStickyFooterContainer","tableElement","tfoot","querySelector","dir","style","zIndex","_getCalculatedZIndex","dirValue","isBorderElement","cssText","zIndexIncrements","firstRowCells","widths","positions","nextPosition","STICKY_POSITIONING_LISTENER","DataRowOutlet","viewContainer","HeaderRowOutlet","FooterRowOutlet","NoDataRowOutlet","CdkTable","role","_dir","_document","_viewRepeater","_viewportRuler","_stickyPositioningListener","_onDestroy","_columnDefsByName","_customColumnDefs","Set","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_stickyColumnStylesNeedReset","_forceRecalculateCellWidths","_cachedRenderRowsMap","stickyCssClass","needsPositionStickyOnElement","_isShowingNoDataRow","_multiTemplateDataRows","_fixedLayout","contentChanged","viewChange","BehaviorSubject","Number","MAX_VALUE","trackBy","_trackByFn","fn","_dataSource","_switchDataSource","multiTemplateDataRows","_rowOutlet","_forceRenderDataRows","updateStickyColumnStyles","fixedLayout","_setupStickyStyler","_applyNativeTableSections","_dataDiffer","_i","dataRow","dataIndex","change","ngAfterContentChecked","_cacheRowDefs","_cacheColumnDefs","rowDefsChanged","columnsChanged","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","_rowDefs","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","_headerRowOutlet","_footerRowOutlet","def","clear","_headerRowDefs","_footerRowDefs","_defaultRowDef","isDataSource","disconnect","renderRows","_renderRows","_getAllRenderRows","_updateNoDataRow","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","item","operation","context","_renderCellTemplateForItem","rowDef","_updateRowIndexContext","forEachIdentityChange","$implicit","NgZone","addColumnDef","removeColumnDef","addRowDef","removeRowDef","addHeaderRowDef","headerRowDef","removeHeaderRowDef","addFooterRowDef","footerRowDef","removeFooterRowDef","setNoDataRow","noDataRow","_customNoDataRow","updateStickyHeaderRowStyles","headerRows","_getRenderedRows","thead","display","_stickyStyler","updateStickyFooterRowStyles","footerRows","dataRows","headerRow","_addStickyColumnStyles","footerRow","values","prevCachedRenderRows","_data","renderRowsForData","_getRenderRowsForData","WeakMap","j","renderRow","cache","rowDefs","_getRowDefs","cachedRenderRows","shift","mergeArrayAndSet","_getOwnDefs","_contentColumnDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","when","columnsDiffReducer","acc","dataColumnsChanged","reduce","headerColumnsChanged","footerColumnsChanged","dataStream","connect","obj","Observable","lift","L","isArray","of","_renderRow","columnDefs","columnName","rowOutlet","renderedRows","viewRef","rootNodes","outlet","view","createEmbeddedView","cellTemplate","_getCellTemplates","renderIndex","count","first","last","even","odd","columnId","documentFragment","createDocumentFragment","sections","tag","outlets","_noDataRowOutlet","section","createElement","appendChild","stickyCheckReducer","d","StickyStyler","items","_noDataRow","shouldShow","rootNode","DOCUMENT","_VIEW_REPEATER_STRATEGY","useClass","_DisposeViewRepeaterStrategy","useValue","ngContentSelectors","W","array","concat","CdkTableModule","ScrollingModule","arguments","Ze","MatCellDef","MatHeaderCellDef","MatColumnDef","MatHeaderCell","MatCell","MatHeaderRowDef","MatRowDef","MatHeaderRow","MatRow","DataSource","initialData","_renderData","_filter","_internalPageChanges","_renderChangesSubscription","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","active","valueA","valueB","valueAType","valueBType","comparatorResult","T","filterPredicate","dataStr","currentTerm","key","transformedFilter","trim","_updateChangeSubscription","_filterData","_sort","paginator","_paginator","sortChange","merge","initialized","filteredData","combineLatest","orderedData","_orderData","paginatedData","_pageData","_updatePaginator","filteredDataLength","then","lastPageIndex","newPageIndex","_MatTableDataSource","matTooltipAnimations","tooltipState","trigger","opacity","transition","animate","keyframes","PANEL_CLASS","passiveListenerOptions","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","Overlay","overlay","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_DEFAULT_OPTIONS","showDelay","hideDelay","touchendHideDelay","_MatTooltipBase","_overlay","_scrollDispatcher","_viewContainerRef","_ariaDescriber","_focusMonitor","scrollStrategy","_defaultOptions","_position","_viewInitialized","_pointerExitEventsInitialized","_viewportMargin","_cssClassPrefix","_showDelay","_hideDelay","touchGestures","_message","_passiveListeners","_scrollStrategy","_overlayRef","_updatePosition","_tooltipInstance","show","updatePosition","hide","_setupPointerEnterEventsIfNeeded","message","removeDescription","String","_isTooltipVisible","_updateTooltipMessage","describe","tooltipClass","_tooltipClass","_setTooltipClass","origin","clearTimeout","_touchstartTimeout","dispose","delay","_showTimeoutId","_hideTimeoutId","overlayRef","_createOverlay","_detach","_portal","ComponentPortal","_tooltipComponent","attach","instance","afterHidden","toggle","isVisible","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","_updateCurrentPositionClass","connectionPair","scrollableViewProperties","isOverlayClipped","positionStrategy","panelClass","detachments","outsidePointerEvents","_handleBodyInteraction","keydownEvents","keyCode","ESCAPE","hasModifierKey","preventDefault","stopPropagation","hasAttached","detach","getConfig","_getOrigin","_getOverlayPosition","withPositions","_addOffset","assign","main","fallback","isLtr","originPosition","originX","originY","l","x","y","_invertPosition","overlayPosition","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","r","newPosition","_currentPosition","classPrefix","removePanelClass","addPanelClass","_platformSupportsMouseEvents","_setupPointerExitEventsIfNeeded","_disableNativeGesturesIfNecessary","setTimeout","_addListeners","exitListeners","_wheelListener","touchendListener","listeners","ANDROID","elementUnderPointer","elementFromPoint","clientX","clientY","gestures","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","MatTooltip","scrollDispatcher","viewContainerRef","platform","ariaDescriber","focusMonitor","defaultOptions","TooltipComponent","_TooltipComponentBase","_visibility","_closeOnInteraction","_onHide","_onShow","_animationStart","_animationDone","toState","_breakpointObserver","_isHandset","observe","Breakpoints","hostVars","pipes","changeDetection","A11yModule","OverlayModule","CdkScrollableModule"],"sources":["./src/app/common/pipe/slugify/slugify.module.ts","./src/app/common/pipe/slugify/slugify.pipe.ts","./src/app/common/schema/datatable/Action.ts","./src/app/common/pipe/order-number/order-number.pipe.ts","./src/app/shared-components/datatable/datatable.component.html","./src/app/shared-components/datatable/datatable.component.ts","./src/app/common/pipe/order-number/order-number.module.ts","./src/app/shared-components/datatable/datatable.module.ts","./src/app/shared-components/dialogs/confirm-dialog/confirm-dialog.component.ts","./src/app/shared-components/dialogs/confirm-dialog/confirm-dialog.component.html","./src/app/common/constants/error-message.ts","./src/app/shared-components/error-message/error-message.component.ts","./src/app/shared-components/error-message/error-message.module.ts","./node_modules/@angular/cdk/fesm2015/text-field.mjs","./node_modules/@angular/material/fesm2015/input.mjs","./node_modules/@angular/material/fesm2015/paginator.mjs","./node_modules/@angular/cdk/fesm2015/table.mjs","./node_modules/rxjs/_esm2015/internal/util/isObservable.js","./node_modules/@angular/material/fesm2015/table.mjs","./node_modules/@angular/material/fesm2015/tooltip.mjs"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SlugifyPipe } from './slugify.pipe';\n\n@NgModule({\n    declarations: [SlugifyPipe],\n    imports: [CommonModule],\n    exports: [SlugifyPipe],\n})\nexport class SlugifyModule {}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'slugify',\n})\nexport class SlugifyPipe implements PipeTransform {\n    transform(input: string): string {\n        return input\n            .toString()\n            .toLowerCase()\n            .replace(/\\s+/g, '-') // Replace spaces with -\n            .replace(/[^\\w\\-]+/g, '') // Remove all non-word chars\n            .replace(/\\-\\-+/g, '-') // Replace multiple - with single -\n            .replace(/^-+/, '') // Trim - from start of text\n            .replace(/-+$/, ''); // Trim - from end of text\n    }\n}\n","export enum ActionType {\n    DELETE = 'delete',\n    EDIT = 'edit',\n    VIEW = 'view',\n    CREATE = 'create',\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'orderNumber',\n    pure: true,\n})\nexport class OrderNumberPipe implements PipeTransform {\n    transform(\n        rowIndex: string | number,\n        pageIndex: string | number,\n        pageSize: string | number\n    ): unknown {\n        return +rowIndex + 1 + +pageSize * +pageIndex;\n    }\n}\n","<div\n    class=\"relative mat-elevation-z8 flex flex-col justify-between min-h-[100px] mt-5 overflow-auto\"\n>\n    <table\n        *ngIf=\"dataSource && dataSource.length > 0; else loadingOrError\"\n        mat-table\n        [dataSource]=\"data\"\n        class=\"w-full\"\n    >\n        <ng-container *ngFor=\"let column of columns\" [matColumnDef]=\"column.columnDef\">\n            <th mat-header-cell *matHeaderCellDef>{{ column.header }}</th>\n\n            <!-- Order Number -->\n            <ng-container *ngIf=\"column.columnDef === '#'\">\n                <td mat-cell *matCellDef=\"let row; let i = index\">\n                    {{ i | orderNumber: paginatorRef.pageIndex:paginatorRef.pageSize }}\n                </td>\n            </ng-container>\n\n            <!-- Line Clamp -->\n            <ng-container\n                *ngIf=\"\n                    ['content', 'name', 'slug'].indexOf(column.columnDef) >= 0;\n                    else normalColumn\n                \"\n            >\n                <td mat-cell *matCellDef=\"let row\" class=\"max-w-xs\">\n                    <div class=\"pr-3 line-clamp-1\">\n                        {{ column.cell(row) }}\n                    </div>\n                </td>\n            </ng-container>\n\n            <!-- Normal Column -->\n            <ng-template #normalColumn>\n                <td mat-cell *matCellDef=\"let row\">{{ column.cell(row) }}</td>\n            </ng-template>\n        </ng-container>\n\n        <ng-container *ngIf=\"actions.length > 0\" matColumnDef=\"action\">\n            <th mat-header-cell *matHeaderCellDef>Action</th>\n            <td mat-cell *matCellDef=\"let row\">\n                <div class=\"flex\">\n                    <ng-container *ngFor=\"let action of actions\" [ngSwitch]=\"action\">\n                        <button\n                            *ngSwitchCase=\"actionType.EDIT\"\n                            type=\"button\"\n                            mat-icon-button\n                            (click)=\"actionTriggered(actionType.EDIT, row._id)\"\n                        >\n                            <mat-icon\n                                matTooltip=\"Edit Row\"\n                                aria-hidden=\"false\"\n                                aria-label=\"Edit row\"\n                                >edit</mat-icon\n                            >\n                        </button>\n                        <button\n                            *ngSwitchCase=\"actionType.DELETE\"\n                            type=\"button\"\n                            mat-icon-button\n                            (click)=\"actionTriggered(actionType.DELETE, row)\"\n                        >\n                            <mat-icon\n                                matTooltip=\"Delete Row\"\n                                aria-hidden=\"false\"\n                                aria-label=\"Delete row\"\n                                >delete</mat-icon\n                            >\n                        </button>\n                        <button\n                            *ngSwitchCase=\"actionType.VIEW\"\n                            type=\"button\"\n                            mat-icon-button\n                            (click)=\"actionTriggered(actionType.VIEW, row)\"\n                        >\n                            <mat-icon\n                                matTooltip=\"View Row\"\n                                aria-hidden=\"false\"\n                                aria-label=\"View row\"\n                                >visibility</mat-icon\n                            >\n                        </button>\n                    </ng-container>\n                </div>\n            </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n    </table>\n\n    <ng-template #loadingOrError>\n        <div *ngIf=\"dataSource && dataSource.length === 0; else loading\" class=\"pt-5 text-center\">\n            No data\n        </div>\n        <ng-template #loading>\n            <app-loading-spinner></app-loading-spinner>\n        </ng-template>\n    </ng-template>\n\n    <mat-paginator\n        #paginatorRef\n        [pageSizeOptions]=\"[5, 10, 20]\"\n        [pageSize]=\"10\"\n        [length]=\"totalItems\"\n        showFirstLastButtons\n        (page)=\"pageChange($event)\"\n    ></mat-paginator>\n</div>\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    NgZone,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChange,\n    ViewChild,\n} from '@angular/core';\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\nimport { MatTable, MatTableDataSource } from '@angular/material/table';\nimport { throwToolbarMixedModesError } from '@angular/material/toolbar';\nimport { ActionType } from 'src/app/common/schema/datatable/Action';\nimport { Column } from 'src/app/common/schema/datatable/Column';\n\n@Component({\n    selector: 'app-datatable',\n    templateUrl: './datatable.component.html',\n    styleUrls: ['./datatable.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DatatableComponent implements OnChanges, OnInit, AfterViewInit {\n    @Input() columns!: Column[];\n    @Input() dataSource: any[] | undefined | null = [];\n    @Input() displayedColumns!: string[];\n    @Input() actions: ActionType[] = [];\n    @Input() totalItems: number = 0;\n\n    @ViewChild(MatTable) table!: MatTable<unknown>;\n    @ViewChild(MatPaginator) paginator!: MatPaginator;\n\n    @Output() onActionTriggered: EventEmitter<{ type: ActionType; payload: string }> =\n        new EventEmitter();\n    @Output() onPaginationChange: EventEmitter<PageEvent> = new EventEmitter();\n\n    public data: MatTableDataSource<any> = new MatTableDataSource();\n    public actionType = ActionType;\n    // public pageSize = 10;\n\n    constructor(private _cdr: ChangeDetectorRef, private _zone: NgZone) {}\n\n    ngOnChanges(changes: any): void {\n        this.data.data = this.dataSource ?? [];\n    }\n\n    ngOnInit(): void {\n        if (this.actions.length > 0) this.displayedColumns = [...this.displayedColumns, 'action'];\n    }\n\n    ngAfterViewInit(): void {}\n\n    actionTriggered(type: ActionType, payload: any): void {\n        this.onActionTriggered.emit({\n            type,\n            payload,\n        });\n    }\n\n    pageChange(event: PageEvent) {\n        this.onPaginationChange.emit(event);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OrderNumberPipe } from './order-number.pipe';\n\n@NgModule({\n    declarations: [OrderNumberPipe],\n    imports: [CommonModule],\n    exports: [OrderNumberPipe],\n})\nexport class OrderNumberModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DatatableComponent } from './datatable.component';\n\n// Import Material table\nimport { MatTableModule } from '@angular/material/table';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { LoadingSpinnerModule } from '../loading-spinner/loading-spinner.module';\nimport { OrderNumberModule } from 'src/app/common/pipe/order-number/order-number.module';\n\n@NgModule({\n    declarations: [DatatableComponent],\n    imports: [\n        CommonModule,\n        MatTableModule,\n        MatPaginatorModule,\n        MatIconModule,\n        MatButtonModule,\n        MatTooltipModule,\n        LoadingSpinnerModule,\n        OrderNumberModule,\n    ],\n    exports: [DatatableComponent],\n})\nexport class DatatableModule {}\n","import { ChangeDetectionStrategy, Component, Inject, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nexport interface ItemDialogData {\n    title: string;\n    submitText: string;\n    message: string;\n}\n\n@Component({\n    selector: 'app-confirm-dialog',\n    templateUrl: './confirm-dialog.component.html',\n    styleUrls: ['./confirm-dialog.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ConfirmDialogComponent implements OnInit {\n    constructor(@Inject(MAT_DIALOG_DATA) public data: ItemDialogData) {}\n\n    ngOnInit(): void {}\n}\n","<h2 mat-dialog-title>{{ data.title }}</h2>\n<div mat-dialog-content>\n    {{ data.message }}\n</div>\n<div mat-dialog-actions>\n    <button type=\"button\" mat-button mat-dialog-close=\"Confirmed\">\n        {{ data.submitText }}\n    </button>\n    <button type=\"button\" mat-button mat-dialog-close>Cancel</button>\n</div>\n","import { InjectionToken } from '@angular/core';\n\nexport enum ErrorMessage {\n    CategoryNotFound = 'Category not found!',\n    ContentNotFound = 'Content not found!',\n    RequiredField = 'This field is required!',\n}\n\nexport const defaultErrors = {\n    required: (error: any) => `This field is required!`,\n    minlength: (error: any) =>\n        `This field must be at least ${error.requiredLength} characters long!`,\n    slugExists: (error: any) => `Slug already exists!`,\n};\n\nexport const FORM_ERRORS = new InjectionToken('FORM_ERRORS', {\n    providedIn: 'root',\n    factory: () => defaultErrors,\n});\n","import {\n    AfterContentInit,\n    AfterViewInit,\n    Component,\n    Inject,\n    Injector,\n    OnChanges,\n    OnInit,\n    Renderer2,\n    SimpleChanges,\n} from '@angular/core';\nimport { FormControlStatus } from '@angular/forms';\nimport { MatFormField, MatFormFieldControl } from '@angular/material/form-field';\nimport { MatInput } from '@angular/material/input';\nimport { Subscription } from 'rxjs';\nimport { FORM_ERRORS } from 'src/app/common/constants/error-message';\n\n@Component({\n    selector: '[matErrorMessage]',\n    template: '{{ error }}',\n})\nexport class ErrorMessageComponent implements AfterViewInit {\n    public error = '';\n    private _inputRef!: MatFormFieldControl<MatInput>;\n    private _subscription = new Subscription();\n\n    constructor(\n        private _inj: Injector,\n        @Inject(FORM_ERRORS) private errors: any,\n        private renderer: Renderer2\n    ) {}\n\n    ngAfterViewInit(): void {\n        const container = this._inj.get(MatFormField);\n        this._inputRef = container._control;\n\n        this._subscription.add(\n            this._inputRef.ngControl?.statusChanges?.subscribe((state) =>\n                this.updateError(state, container)\n            )\n        );\n    }\n\n    updateError(state: FormControlStatus, container: MatFormField) {\n        if (state === 'INVALID' && this._inputRef.ngControl?.errors) {\n            this.renderer.addClass(container._elementRef.nativeElement, 'mb-2');\n            const controlErrors = this._inputRef.ngControl?.errors;\n            const firstKey = Object.keys(controlErrors)[0];\n            const getError = this.errors[firstKey];\n            this.error = getError(controlErrors[firstKey]);\n        } else container._elementRef.nativeElement.classList.remove('mb-2');\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ErrorMessageComponent } from './error-message.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\n\n@NgModule({\n    declarations: [ErrorMessageComponent],\n    imports: [CommonModule, MatFormFieldModule],\n    exports: [ErrorMessageComponent],\n})\nexport class ErrorMessageModule {}\n","import * as i1 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Output, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options to pass to the animationstart listener. */\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject;\n        }\n        const result = new Subject();\n        const cssClass = 'cdk-text-field-autofilled';\n        const listener = ((event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: false }));\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            },\n        });\n        return result;\n    }\n    stopMonitoring(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n}\nAutofillMonitor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: AutofillMonitor, deps: [{ token: i1.Platform }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nAutofillMonitor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: AutofillMonitor, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: AutofillMonitor, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.Platform }, { type: i0.NgZone }]; } });\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /** Emits when the autofill state of the element changes. */\n        this.cdkAutofill = new EventEmitter();\n    }\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n}\nCdkAutofill.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkAutofill, deps: [{ token: i0.ElementRef }, { token: AutofillMonitor }], target: i0.ɵɵFactoryTarget.Directive });\nCdkAutofill.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: CdkAutofill, selector: \"[cdkAutofill]\", outputs: { cdkAutofill: \"cdkAutofill\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkAutofill, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkAutofill]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: AutofillMonitor }]; }, propDecorators: { cdkAutofill: [{\n                type: Output\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n    constructor(_elementRef, _platform, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._isViewInited = false;\n        /** Handles `focus` and `blur` events. */\n        this._handleFocusEvent = (event) => {\n            this._hasFocus = event.type === 'focus';\n        };\n        this._document = document;\n        this._textareaElement = this._elementRef.nativeElement;\n    }\n    /** Minimum amount of rows in the textarea. */\n    get minRows() {\n        return this._minRows;\n    }\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() {\n        return this._maxRows;\n    }\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        value = coerceBooleanProperty(value);\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    get placeholder() {\n        return this._textareaElement.placeholder;\n    }\n    set placeholder(value) {\n        this._cachedPlaceholderHeight = undefined;\n        if (value) {\n            this._textareaElement.setAttribute('placeholder', value);\n        }\n        else {\n            this._textareaElement.removeAttribute('placeholder');\n        }\n        this._cacheTextareaPlaceholderHeight();\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n        const minHeight = this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n        const maxHeight = this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe(() => this.resizeToFitContent(true));\n                this._textareaElement.addEventListener('focus', this._handleFocusEvent);\n                this._textareaElement.addEventListener('blur', this._handleFocusEvent);\n            });\n            this._isViewInited = true;\n            this.resizeToFitContent(true);\n        }\n    }\n    ngOnDestroy() {\n        this._textareaElement.removeEventListener('focus', this._handleFocusEvent);\n        this._textareaElement.removeEventListener('blur', this._handleFocusEvent);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        let textareaClone = this._textareaElement.cloneNode(false);\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        textareaClone.remove();\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    _measureScrollHeight() {\n        const element = this._textareaElement;\n        const previousMargin = element.style.marginBottom || '';\n        const isFirefox = this._platform.FIREFOX;\n        const needsMarginFiller = isFirefox && this._hasFocus;\n        const measuringClass = isFirefox\n            ? 'cdk-textarea-autosize-measuring-firefox'\n            : 'cdk-textarea-autosize-measuring';\n        // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n        // work around it by assigning a temporary margin with the same height as the `textarea` so that\n        // it occupies the same amount of space. See #23233.\n        if (needsMarginFiller) {\n            element.style.marginBottom = `${element.clientHeight}px`;\n        }\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        element.classList.add(measuringClass);\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const scrollHeight = element.scrollHeight - 4;\n        element.classList.remove(measuringClass);\n        if (needsMarginFiller) {\n            element.style.marginBottom = previousMargin;\n        }\n        return scrollHeight;\n    }\n    _cacheTextareaPlaceholderHeight() {\n        if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n            return;\n        }\n        if (!this.placeholder) {\n            this._cachedPlaceholderHeight = 0;\n            return;\n        }\n        const value = this._textareaElement.value;\n        this._textareaElement.value = this._textareaElement.placeholder;\n        this._cachedPlaceholderHeight = this._measureScrollHeight();\n        this._textareaElement.value = value;\n    }\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        this._cacheTextareaPlaceholderHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const textarea = this._elementRef.nativeElement;\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        const scrollHeight = this._measureScrollHeight();\n        const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n            }\n            else {\n                setTimeout(() => this._scrollToCaretPosition(textarea));\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && this._hasFocus) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n}\nCdkTextareaAutosize.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkTextareaAutosize, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkTextareaAutosize.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: CdkTextareaAutosize, selector: \"textarea[cdkTextareaAutosize]\", inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\"], placeholder: \"placeholder\" }, host: { attributes: { \"rows\": \"1\" }, listeners: { \"input\": \"_noopInputHandler()\" }, classAttribute: \"cdk-textarea-autosize\" }, exportAs: [\"cdkTextareaAutosize\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkTextareaAutosize, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'textarea[cdkTextareaAutosize]',\n                    exportAs: 'cdkTextareaAutosize',\n                    host: {\n                        'class': 'cdk-textarea-autosize',\n                        // Textarea elements that have the directive applied should have a single row by default.\n                        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                        'rows': '1',\n                        '(input)': '_noopInputHandler()',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    }, propDecorators: { minRows: [{\n                type: Input,\n                args: ['cdkAutosizeMinRows']\n            }], maxRows: [{\n                type: Input,\n                args: ['cdkAutosizeMaxRows']\n            }], enabled: [{\n                type: Input,\n                args: ['cdkTextareaAutosize']\n            }], placeholder: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass TextFieldModule {\n}\nTextFieldModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: TextFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTextFieldModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: TextFieldModule, declarations: [CdkAutofill, CdkTextareaAutosize], exports: [CdkAutofill, CdkTextareaAutosize] });\nTextFieldModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: TextFieldModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: TextFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [CdkAutofill, CdkTextareaAutosize],\n                    exports: [CdkAutofill, CdkTextareaAutosize],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { getSupportedInputTypes } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Optional, Self, Inject, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport * as i3 from '@angular/material/core';\nimport { mixinErrorState, MatCommonModule, ErrorStateMatcher } from '@angular/material/core';\nimport * as i5 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\nimport * as i4 from '@angular/cdk/text-field';\nimport { TextFieldModule } from '@angular/cdk/text-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit',\n];\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nconst _MatInputBase = mixinErrorState(class {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n});\n/** Directive that allows a native input to work inside a `MatFormField`. */\nclass MatInput extends _MatInputBase {\n    constructor(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, \n    // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form-field for determining whether the placeholder has been promoted.\n    _formField) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._autofillMonitor = _autofillMonitor;\n        this._formField = _formField;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week',\n        ].filter(t => getSupportedInputTypes().has(t));\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', (event) => {\n                    const el = event.target;\n                    // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n                    // indicate different things. If the value is 0, it means that the caret is at the start\n                    // of the input, whereas a value of `null` means that the input doesn't support\n                    // manipulating the selection range. Inputs that don't support setting the selection range\n                    // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n                    // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n                    if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n                        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                        // `1, 1` fixes it for the first time that you type text and\n                        // then hold delete. Toggling to `1, 1` and then back to\n                        // `0, 0` seems to completely fix it.\n                        el.setSelectionRange(1, 1);\n                        el.setSelectionRange(0, 0);\n                    }\n                });\n            });\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        this._isInFormField = !!_formField;\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple\n                ? 'mat-native-select-multiple'\n                : 'mat-native-select';\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() {\n        var _a, _b, _c, _d;\n        return (_d = (_a = this._required) !== null && _a !== void 0 ? _a : (_c = (_b = this.ngControl) === null || _b === void 0 ? void 0 : _b.control) === null || _c === void 0 ? void 0 : _c.hasValidator(Validators.required)) !== null && _d !== void 0 ? _d : false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Input type of the element. */\n    get type() {\n        return this._type;\n    }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() {\n        return this._inputValueAccessor.value;\n    }\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() {\n        return this._readonly;\n    }\n    set readonly(value) {\n        this._readonly = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        var _a, _b;\n        // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n        // screen readers will read it out twice: once from the label and once from the attribute.\n        // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n        // the only one that supports promoting the placeholder to a label.\n        const placeholder = ((_b = (_a = this._formField) === null || _a === void 0 ? void 0 : _a._hideControlPlaceholder) === null || _b === void 0 ? void 0 : _b.call(_a)) ? null : this.placeholder;\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder\n                ? element.setAttribute('placeholder', placeholder)\n                : element.removeAttribute('placeholder');\n        }\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._isNeverEmpty() &&\n            !this._elementRef.nativeElement.value &&\n            !this._isBadInput() &&\n            !this.autofilled);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return (this.focused ||\n                selectElement.multiple ||\n                !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label));\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n    /** Whether the form control is a native select that is displayed inline. */\n    _isInlineSelect() {\n        const element = this._elementRef.nativeElement;\n        return this._isNativeSelect && (element.multiple || element.size > 1);\n    }\n}\nMatInput.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatInput, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i2.NgControl, optional: true, self: true }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i3.ErrorStateMatcher }, { token: MAT_INPUT_VALUE_ACCESSOR, optional: true, self: true }, { token: i4.AutofillMonitor }, { token: i0.NgZone }, { token: MAT_FORM_FIELD, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatInput.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],\\n      input[matNativeControl], textarea[matNativeControl]\", inputs: { disabled: \"disabled\", id: \"id\", placeholder: \"placeholder\", name: \"name\", required: \"required\", type: \"type\", errorStateMatcher: \"errorStateMatcher\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], value: \"value\", readonly: \"readonly\" }, host: { listeners: { \"focus\": \"_focusChanged(true)\", \"blur\": \"_focusChanged(false)\", \"input\": \"_onInput()\" }, properties: { \"class.mat-input-server\": \"_isServer\", \"attr.id\": \"id\", \"attr.data-placeholder\": \"placeholder\", \"disabled\": \"disabled\", \"required\": \"required\", \"attr.name\": \"name || null\", \"attr.readonly\": \"readonly && !_isNativeSelect || null\", \"class.mat-native-select-inline\": \"_isInlineSelect()\", \"attr.aria-invalid\": \"(empty && required) ? null : errorState\", \"attr.aria-required\": \"required\" }, classAttribute: \"mat-input-element mat-form-field-autofill-control\" }, providers: [{ provide: MatFormFieldControl, useExisting: MatInput }], exportAs: [\"matInput\"], usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatInput, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                    exportAs: 'matInput',\n                    host: {\n                        /**\n                         * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                         */\n                        'class': 'mat-input-element mat-form-field-autofill-control',\n                        '[class.mat-input-server]': '_isServer',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[attr.id]': 'id',\n                        // At the time of writing, we have a lot of customer tests that look up the input based on its\n                        // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n                        // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n                        '[attr.data-placeholder]': 'placeholder',\n                        '[disabled]': 'disabled',\n                        '[required]': 'required',\n                        '[attr.name]': 'name || null',\n                        '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                        '[class.mat-native-select-inline]': '_isInlineSelect()',\n                        // Only mark the input as invalid for assistive technology if it has a value since the\n                        // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n                        '[attr.aria-invalid]': '(empty && required) ? null : errorState',\n                        '[attr.aria-required]': 'required',\n                        '(focus)': '_focusChanged(true)',\n                        '(blur)': '_focusChanged(false)',\n                        '(input)': '_onInput()',\n                    },\n                    providers: [{ provide: MatFormFieldControl, useExisting: MatInput }],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i2.NgControl, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Self\n                    }] }, { type: i2.NgForm, decorators: [{\n                        type: Optional\n                    }] }, { type: i2.FormGroupDirective, decorators: [{\n                        type: Optional\n                    }] }, { type: i3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Self\n                    }, {\n                        type: Inject,\n                        args: [MAT_INPUT_VALUE_ACCESSOR]\n                    }] }, { type: i4.AutofillMonitor }, { type: i0.NgZone }, { type: i5.MatFormField, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_FORM_FIELD]\n                    }] }];\n    }, propDecorators: { disabled: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], errorStateMatcher: [{\n                type: Input\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], value: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatInputModule {\n}\nMatInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatInputModule, declarations: [MatInput], imports: [TextFieldModule, MatFormFieldModule, MatCommonModule], exports: [TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule,\n        MatInput] });\nMatInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatInputModule, providers: [ErrorStateMatcher], imports: [[TextFieldModule, MatFormFieldModule, MatCommonModule], TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatInputModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [MatInput],\n                    imports: [TextFieldModule, MatFormFieldModule, MatCommonModule],\n                    exports: [\n                        TextFieldModule,\n                        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                        // be used together with `MatFormField`.\n                        MatFormFieldModule,\n                        MatInput,\n                    ],\n                    providers: [ErrorStateMatcher],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, getMatInputUnsupportedTypeError };\n","import * as i6 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Optional, SkipSelf, InjectionToken, EventEmitter, Directive, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, NgModule } from '@angular/core';\nimport * as i4 from '@angular/material/core';\nimport { mixinDisabled, mixinInitialized, MatCommonModule } from '@angular/material/core';\nimport * as i5 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i3 from '@angular/material/select';\nimport { MatSelectModule } from '@angular/material/select';\nimport * as i7 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/material/form-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\nclass MatPaginatorIntl {\n    constructor() {\n        /**\n         * Stream to emit from when labels are changed. Use this to notify components when the labels have\n         * changed after initialization.\n         */\n        this.changes = new Subject();\n        /** A label for the page size selector. */\n        this.itemsPerPageLabel = 'Items per page:';\n        /** A label for the button that increments the current page. */\n        this.nextPageLabel = 'Next page';\n        /** A label for the button that decrements the current page. */\n        this.previousPageLabel = 'Previous page';\n        /** A label for the button that moves to the first page. */\n        this.firstPageLabel = 'First page';\n        /** A label for the button that moves to the last page. */\n        this.lastPageLabel = 'Last page';\n        /** A label for the range of items within the current page and the length of the whole list. */\n        this.getRangeLabel = (page, pageSize, length) => {\n            if (length == 0 || pageSize == 0) {\n                return `0 of ${length}`;\n            }\n            length = Math.max(length, 0);\n            const startIndex = page * pageSize;\n            // If the start index exceeds the list length, do not try and fix the end index to the end.\n            const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\n            return `${startIndex + 1} – ${endIndex} of ${length}`;\n        };\n    }\n}\nMatPaginatorIntl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatPaginatorIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nMatPaginatorIntl.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatPaginatorIntl, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatPaginatorIntl, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/** @docs-private */\nfunction MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatPaginatorIntl();\n}\n/** @docs-private */\nconst MAT_PAGINATOR_INTL_PROVIDER = {\n    // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n    provide: MatPaginatorIntl,\n    deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n    useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nclass PageEvent {\n}\n/** Injection token that can be used to provide the default options for the paginator module. */\nconst MAT_PAGINATOR_DEFAULT_OPTIONS = new InjectionToken('MAT_PAGINATOR_DEFAULT_OPTIONS');\n// Boilerplate for applying mixins to _MatPaginatorBase.\n/** @docs-private */\nconst _MatPaginatorMixinBase = mixinDisabled(mixinInitialized(class {\n}));\n/**\n * Base class with all of the `MatPaginator` functionality.\n * @docs-private\n */\nclass _MatPaginatorBase extends _MatPaginatorMixinBase {\n    constructor(_intl, _changeDetectorRef, defaults) {\n        super();\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._pageIndex = 0;\n        this._length = 0;\n        this._pageSizeOptions = [];\n        this._hidePageSize = false;\n        this._showFirstLastButtons = false;\n        /** Event emitted when the paginator changes the page size or page index. */\n        this.page = new EventEmitter();\n        this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n        if (defaults) {\n            const { pageSize, pageSizeOptions, hidePageSize, showFirstLastButtons } = defaults;\n            if (pageSize != null) {\n                this._pageSize = pageSize;\n            }\n            if (pageSizeOptions != null) {\n                this._pageSizeOptions = pageSizeOptions;\n            }\n            if (hidePageSize != null) {\n                this._hidePageSize = hidePageSize;\n            }\n            if (showFirstLastButtons != null) {\n                this._showFirstLastButtons = showFirstLastButtons;\n            }\n        }\n    }\n    /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n    get pageIndex() {\n        return this._pageIndex;\n    }\n    set pageIndex(value) {\n        this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** The length of the total number of items that are being paginated. Defaulted to 0. */\n    get length() {\n        return this._length;\n    }\n    set length(value) {\n        this._length = coerceNumberProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Number of items to display on a page. By default set to 50. */\n    get pageSize() {\n        return this._pageSize;\n    }\n    set pageSize(value) {\n        this._pageSize = Math.max(coerceNumberProperty(value), 0);\n        this._updateDisplayedPageSizeOptions();\n    }\n    /** The set of provided page size options to display to the user. */\n    get pageSizeOptions() {\n        return this._pageSizeOptions;\n    }\n    set pageSizeOptions(value) {\n        this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n        this._updateDisplayedPageSizeOptions();\n    }\n    /** Whether to hide the page size selection UI from the user. */\n    get hidePageSize() {\n        return this._hidePageSize;\n    }\n    set hidePageSize(value) {\n        this._hidePageSize = coerceBooleanProperty(value);\n    }\n    /** Whether to show the first/last buttons UI to the user. */\n    get showFirstLastButtons() {\n        return this._showFirstLastButtons;\n    }\n    set showFirstLastButtons(value) {\n        this._showFirstLastButtons = coerceBooleanProperty(value);\n    }\n    ngOnInit() {\n        this._initialized = true;\n        this._updateDisplayedPageSizeOptions();\n        this._markInitialized();\n    }\n    ngOnDestroy() {\n        this._intlChanges.unsubscribe();\n    }\n    /** Advances to the next page if it exists. */\n    nextPage() {\n        if (!this.hasNextPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.pageIndex + 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move back to the previous page if it exists. */\n    previousPage() {\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.pageIndex - 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move to the first page if not already there. */\n    firstPage() {\n        // hasPreviousPage being false implies at the start\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = 0;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move to the last page if not already there. */\n    lastPage() {\n        // hasNextPage being false implies at the end\n        if (!this.hasNextPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.getNumberOfPages() - 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Whether there is a previous page. */\n    hasPreviousPage() {\n        return this.pageIndex >= 1 && this.pageSize != 0;\n    }\n    /** Whether there is a next page. */\n    hasNextPage() {\n        const maxPageIndex = this.getNumberOfPages() - 1;\n        return this.pageIndex < maxPageIndex && this.pageSize != 0;\n    }\n    /** Calculate the number of pages */\n    getNumberOfPages() {\n        if (!this.pageSize) {\n            return 0;\n        }\n        return Math.ceil(this.length / this.pageSize);\n    }\n    /**\n     * Changes the page size so that the first item displayed on the page will still be\n     * displayed using the new page size.\n     *\n     * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n     * switching so that the page size is 5 will set the third page as the current page so\n     * that the 10th item will still be displayed.\n     */\n    _changePageSize(pageSize) {\n        // Current page needs to be updated to reflect the new page size. Navigate to the page\n        // containing the previous page's first item.\n        const startIndex = this.pageIndex * this.pageSize;\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n        this.pageSize = pageSize;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Checks whether the buttons for going forwards should be disabled. */\n    _nextButtonsDisabled() {\n        return this.disabled || !this.hasNextPage();\n    }\n    /** Checks whether the buttons for going backwards should be disabled. */\n    _previousButtonsDisabled() {\n        return this.disabled || !this.hasPreviousPage();\n    }\n    /**\n     * Updates the list of page size options to display to the user. Includes making sure that\n     * the page size is an option and that the list is sorted.\n     */\n    _updateDisplayedPageSizeOptions() {\n        if (!this._initialized) {\n            return;\n        }\n        // If no page size is provided, use the first page size option or the default page size.\n        if (!this.pageSize) {\n            this._pageSize =\n                this.pageSizeOptions.length != 0 ? this.pageSizeOptions[0] : DEFAULT_PAGE_SIZE;\n        }\n        this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n        if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n            this._displayedPageSizeOptions.push(this.pageSize);\n        }\n        // Sort the numbers using a number-specific sort function.\n        this._displayedPageSizeOptions.sort((a, b) => a - b);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n    _emitPageEvent(previousPageIndex) {\n        this.page.emit({\n            previousPageIndex,\n            pageIndex: this.pageIndex,\n            pageSize: this.pageSize,\n            length: this.length,\n        });\n    }\n}\n_MatPaginatorBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: _MatPaginatorBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatPaginatorBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: _MatPaginatorBase, inputs: { color: \"color\", pageIndex: \"pageIndex\", length: \"length\", pageSize: \"pageSize\", pageSizeOptions: \"pageSizeOptions\", hidePageSize: \"hidePageSize\", showFirstLastButtons: \"showFirstLastButtons\" }, outputs: { page: \"page\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: _MatPaginatorBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: MatPaginatorIntl }, { type: i0.ChangeDetectorRef }, { type: undefined }]; }, propDecorators: { color: [{\n                type: Input\n            }], pageIndex: [{\n                type: Input\n            }], length: [{\n                type: Input\n            }], pageSize: [{\n                type: Input\n            }], pageSizeOptions: [{\n                type: Input\n            }], hidePageSize: [{\n                type: Input\n            }], showFirstLastButtons: [{\n                type: Input\n            }], page: [{\n                type: Output\n            }] } });\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nclass MatPaginator extends _MatPaginatorBase {\n    constructor(intl, changeDetectorRef, defaults) {\n        super(intl, changeDetectorRef, defaults);\n        if (defaults && defaults.formFieldAppearance != null) {\n            this._formFieldAppearance = defaults.formFieldAppearance;\n        }\n    }\n}\nMatPaginator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatPaginator, deps: [{ token: MatPaginatorIntl }, { token: i0.ChangeDetectorRef }, { token: MAT_PAGINATOR_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatPaginator.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatPaginator, selector: \"mat-paginator\", inputs: { disabled: \"disabled\" }, host: { attributes: { \"role\": \"group\" }, classAttribute: \"mat-paginator\" }, exportAs: [\"matPaginator\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-paginator-outer-container\\\">\\n  <div class=\\\"mat-paginator-container\\\">\\n    <div class=\\\"mat-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\">\\n      <div class=\\\"mat-paginator-page-size-label\\\">\\n        {{_intl.itemsPerPageLabel}}\\n      </div>\\n\\n      <mat-form-field\\n        *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\"\\n        [appearance]=\\\"_formFieldAppearance!\\\"\\n        [color]=\\\"color\\\"\\n        class=\\\"mat-paginator-page-size-select\\\">\\n        <mat-select\\n          [value]=\\\"pageSize\\\"\\n          [disabled]=\\\"disabled\\\"\\n          [aria-label]=\\\"_intl.itemsPerPageLabel\\\"\\n          (selectionChange)=\\\"_changePageSize($event.value)\\\">\\n          <mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">\\n            {{pageSizeOption}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <div\\n        class=\\\"mat-paginator-page-size-value\\\"\\n        *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div>\\n    </div>\\n\\n    <div class=\\\"mat-paginator-range-actions\\\">\\n      <div class=\\\"mat-paginator-range-label\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-first\\\"\\n              (click)=\\\"firstPage()\\\"\\n              [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-last\\\"\\n              (click)=\\\"lastPage()\\\"\\n              [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n        </svg>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}.cdk-high-contrast-active .mat-paginator-icon{fill:CanvasText}\\n\"], components: [{ type: i2.MatFormField, selector: \"mat-form-field\", inputs: [\"color\", \"appearance\", \"hideRequiredMarker\", \"hintLabel\", \"floatLabel\"], exportAs: [\"matFormField\"] }, { type: i3.MatSelect, selector: \"mat-select\", inputs: [\"disabled\", \"disableRipple\", \"tabIndex\"], exportAs: [\"matSelect\"] }, { type: i4.MatOption, selector: \"mat-option\", exportAs: [\"matOption\"] }, { type: i5.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i6.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i6.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i7.MatTooltip, selector: \"[matTooltip]\", exportAs: [\"matTooltip\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatPaginator, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-paginator', exportAs: 'matPaginator', inputs: ['disabled'], host: {\n                        'class': 'mat-paginator',\n                        'role': 'group',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"mat-paginator-outer-container\\\">\\n  <div class=\\\"mat-paginator-container\\\">\\n    <div class=\\\"mat-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\">\\n      <div class=\\\"mat-paginator-page-size-label\\\">\\n        {{_intl.itemsPerPageLabel}}\\n      </div>\\n\\n      <mat-form-field\\n        *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\"\\n        [appearance]=\\\"_formFieldAppearance!\\\"\\n        [color]=\\\"color\\\"\\n        class=\\\"mat-paginator-page-size-select\\\">\\n        <mat-select\\n          [value]=\\\"pageSize\\\"\\n          [disabled]=\\\"disabled\\\"\\n          [aria-label]=\\\"_intl.itemsPerPageLabel\\\"\\n          (selectionChange)=\\\"_changePageSize($event.value)\\\">\\n          <mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">\\n            {{pageSizeOption}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <div\\n        class=\\\"mat-paginator-page-size-value\\\"\\n        *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div>\\n    </div>\\n\\n    <div class=\\\"mat-paginator-range-actions\\\">\\n      <div class=\\\"mat-paginator-range-label\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-first\\\"\\n              (click)=\\\"firstPage()\\\"\\n              [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-last\\\"\\n              (click)=\\\"lastPage()\\\"\\n              [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n        </svg>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}.cdk-high-contrast-active .mat-paginator-icon{fill:CanvasText}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: MatPaginatorIntl }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_PAGINATOR_DEFAULT_OPTIONS]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatPaginatorModule {\n}\nMatPaginatorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatPaginatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatPaginatorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatPaginatorModule, declarations: [MatPaginator], imports: [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule, MatCommonModule], exports: [MatPaginator] });\nMatPaginatorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatPaginatorModule, providers: [MAT_PAGINATOR_INTL_PROVIDER], imports: [[CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule, MatCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatPaginatorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule, MatCommonModule],\n                    exports: [MatPaginator],\n                    declarations: [MatPaginator],\n                    providers: [MAT_PAGINATOR_INTL_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PAGINATOR_DEFAULT_OPTIONS, MAT_PAGINATOR_INTL_PROVIDER, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MatPaginator, MatPaginatorIntl, MatPaginatorModule, PageEvent, _MatPaginatorBase };\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, isDataSource, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nexport { DataSource } from '@angular/cdk/collections';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Optional, Input, ContentChild, Injectable, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, EventEmitter, NgZone, Attribute, SkipSelf, Output, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { Subject, from, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/bidi';\nimport * as i2 from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /** Whether the sticky input has changed since it was last checked. */\n            this._hasStickyChanged = false;\n        }\n        /** Whether sticky positioning should be applied. */\n        get sticky() {\n            return this._sticky;\n        }\n        set sticky(v) {\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /** Whether the sticky value has changed since this was last called. */\n        hasStickyChanged() {\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /** Resets the dirty check for cases where the sticky state has been used without checking. */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkCellDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkCellDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: CdkCellDef, selector: \"[cdkCellDef]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkCellDef, decorators: [{\n            type: Directive,\n            args: [{ selector: '[cdkCellDef]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkHeaderCellDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkHeaderCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkHeaderCellDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: CdkHeaderCellDef, selector: \"[cdkHeaderCellDef]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{ selector: '[cdkHeaderCellDef]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkFooterCellDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkFooterCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkFooterCellDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: CdkFooterCellDef, selector: \"[cdkFooterCellDef]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{ selector: '[cdkFooterCellDef]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n// Boilerplate for applying mixins to CdkColumnDef.\n/** @docs-private */\nclass CdkColumnDefBase {\n}\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n    constructor(_table) {\n        super();\n        this._table = _table;\n        this._stickyEnd = false;\n    }\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    set stickyEnd(v) {\n        const prevValue = this._stickyEnd;\n        this._stickyEnd = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n    /**\n     * Overridable method that sets the css classes that will be added to every cell in this\n     * column.\n     * In the future, columnCssClassName will change from type string[] to string and this\n     * will set a single string value.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setNameInput(value) {\n        // If the directive is set without a name (updated programmatically), then this setter will\n        // trigger with an empty string and should not overwrite the programmatically set value.\n        if (value) {\n            this._name = value;\n            this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/gi, '-');\n            this._updateColumnCssClassName();\n        }\n    }\n}\nCdkColumnDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkColumnDef, deps: [{ token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkColumnDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: CdkColumnDef, selector: \"[cdkColumnDef]\", inputs: { sticky: \"sticky\", name: [\"cdkColumnDef\", \"name\"], stickyEnd: \"stickyEnd\" }, providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }], queries: [{ propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true }, { propertyName: \"footerCell\", first: true, predicate: CdkFooterCellDef, descendants: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkColumnDef]',\n                    inputs: ['sticky'],\n                    providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_TABLE]\n                    }, {\n                        type: Optional\n                    }] }];\n    }, propDecorators: { name: [{\n                type: Input,\n                args: ['cdkColumnDef']\n            }], stickyEnd: [{\n                type: Input,\n                args: ['stickyEnd']\n            }], cell: [{\n                type: ContentChild,\n                args: [CdkCellDef]\n            }], headerCell: [{\n                type: ContentChild,\n                args: [CdkHeaderCellDef]\n            }], footerCell: [{\n                type: ContentChild,\n                args: [CdkFooterCellDef]\n            }] } });\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        elementRef.nativeElement.classList.add(...columnDef._columnCssClassName);\n    }\n}\n/** Header cell template container that adds the right classes and role. */\nclass CdkHeaderCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n}\nCdkHeaderCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkHeaderCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkHeaderCell.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: CdkHeaderCell, selector: \"cdk-header-cell, th[cdk-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"cdk-header-cell\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-header-cell, th[cdk-header-cell]',\n                    host: {\n                        'class': 'cdk-header-cell',\n                        'role': 'columnheader',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: CdkColumnDef }, { type: i0.ElementRef }]; } });\n/** Footer cell template container that adds the right classes and role. */\nclass CdkFooterCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        var _a;\n        super(columnDef, elementRef);\n        if (((_a = columnDef._table) === null || _a === void 0 ? void 0 : _a._elementRef.nativeElement.nodeType) === 1) {\n            const tableRole = columnDef._table._elementRef.nativeElement.getAttribute('role');\n            const role = tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n}\nCdkFooterCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkFooterCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkFooterCell.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: CdkFooterCell, selector: \"cdk-footer-cell, td[cdk-footer-cell]\", host: { classAttribute: \"cdk-footer-cell\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                    host: {\n                        'class': 'cdk-footer-cell',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: CdkColumnDef }, { type: i0.ElementRef }]; } });\n/** Cell template container that adds the right classes and role. */\nclass CdkCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        var _a;\n        super(columnDef, elementRef);\n        if (((_a = columnDef._table) === null || _a === void 0 ? void 0 : _a._elementRef.nativeElement.nodeType) === 1) {\n            const tableRole = columnDef._table._elementRef.nativeElement.getAttribute('role');\n            const role = tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n}\nCdkCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkCell.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: CdkCell, selector: \"cdk-cell, td[cdk-cell]\", host: { classAttribute: \"cdk-cell\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-cell, td[cdk-cell]',\n                    host: {\n                        'class': 'cdk-cell',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: CdkColumnDef }, { type: i0.ElementRef }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @docs-private\n */\nclass _Schedule {\n    constructor() {\n        this.tasks = [];\n        this.endTasks = [];\n    }\n}\n/** Injection token used to provide a coalesced style scheduler. */\nconst _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\nclass _CoalescedStyleScheduler {\n    constructor(_ngZone) {\n        this._ngZone = _ngZone;\n        this._currentSchedule = null;\n        this._destroyed = new Subject();\n    }\n    /**\n     * Schedules the specified task to run at the end of the current VM turn.\n     */\n    schedule(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.tasks.push(task);\n    }\n    /**\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\n     * VM turn.\n     */\n    scheduleEnd(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.endTasks.push(task);\n    }\n    /** Prevent any further tasks from running. */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    _createScheduleIfNeeded() {\n        if (this._currentSchedule) {\n            return;\n        }\n        this._currentSchedule = new _Schedule();\n        this._getScheduleObservable()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => {\n            while (this._currentSchedule.tasks.length || this._currentSchedule.endTasks.length) {\n                const schedule = this._currentSchedule;\n                // Capture new tasks scheduled by the current set of tasks.\n                this._currentSchedule = new _Schedule();\n                for (const task of schedule.tasks) {\n                    task();\n                }\n                for (const task of schedule.endTasks) {\n                    task();\n                }\n            }\n            this._currentSchedule = null;\n        });\n    }\n    _getScheduleObservable() {\n        // Use onStable when in the context of an ongoing change detection cycle so that we\n        // do not accidentally trigger additional cycles.\n        return this._ngZone.isStable\n            ? from(Promise.resolve(undefined))\n            : this._ngZone.onStable.pipe(take(1));\n    }\n}\n_CoalescedStyleScheduler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: _CoalescedStyleScheduler, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\n_CoalescedStyleScheduler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: _CoalescedStyleScheduler });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: _CoalescedStyleScheduler, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nclass BaseRowDef {\n    constructor(\n    /** @docs-private */ template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n}\nBaseRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: BaseRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }], target: i0.ɵɵFactoryTarget.Directive });\nBaseRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: BaseRowDef, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: BaseRowDef, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }]; } });\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/** @docs-private */\nclass CdkHeaderRowDefBase extends BaseRowDef {\n}\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkHeaderRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkHeaderRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkHeaderRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: CdkHeaderRowDef, selector: \"[cdkHeaderRowDef]\", inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkHeaderRowDef]',\n                    inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_TABLE]\n                    }, {\n                        type: Optional\n                    }] }];\n    } });\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/** @docs-private */\nclass CdkFooterRowDefBase extends BaseRowDef {\n}\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n}\nCdkFooterRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkFooterRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkFooterRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: CdkFooterRowDef, selector: \"[cdkFooterRowDef]\", inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\"] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkFooterRowDef]',\n                    inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_TABLE]\n                    }, {\n                        type: Optional\n                    }] }];\n    } });\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n}\nCdkRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: CdkRowDef, selector: \"[cdkRowDef]\", inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkRowDef]',\n                    inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_TABLE]\n                    }, {\n                        type: Optional\n                    }] }];\n    } });\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nclass CdkCellOutlet {\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n}\n/**\n * Static property containing the latest constructed instance of this class.\n * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n * createEmbeddedView. After one of these components are created, this property will provide\n * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n * construct the cells with the provided context.\n */\nCdkCellOutlet.mostRecentCellOutlet = null;\nCdkCellOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkCellOutlet, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkCellOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkCellOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[cdkCellOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass CdkHeaderRow {\n}\nCdkHeaderRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkHeaderRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCdkHeaderRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: CdkHeaderRow, selector: \"cdk-header-row, tr[cdk-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-header-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, directives: [{ type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-header-row, tr[cdk-header-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                }]\n        }] });\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass CdkFooterRow {\n}\nCdkFooterRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkFooterRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCdkFooterRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: CdkFooterRow, selector: \"cdk-footer-row, tr[cdk-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-footer-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, directives: [{ type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-footer-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                }]\n        }] });\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass CdkRow {\n}\nCdkRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkRow, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCdkRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: CdkRow, selector: \"cdk-row, tr[cdk-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, directives: [{ type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-row, tr[cdk-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                }]\n        }] });\n/** Row that can be used to display a message when no data is shown in the table. */\nclass CdkNoDataRow {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._contentClassName = 'cdk-no-data-row';\n    }\n}\nCdkNoDataRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkNoDataRow, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkNoDataRow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: CdkNoDataRow, selector: \"ng-template[cdkNoDataRow]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkNoDataRow]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n    /**\n     * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n     * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n     *     using inline styles. If false, it is assumed that position: sticky is included in\n     *     the component stylesheet for _stickCellCss.\n     * @param _positionListener A listener that is notified of changes to sticky rows/columns\n     *     and their dimensions.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, _coalescedStyleScheduler, _isBrowser = true, _needsPositionStickyOnElement = true, _positionListener) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._isBrowser = _isBrowser;\n        this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n        this._positionListener = _positionListener;\n        this._cachedCellWidths = [];\n        this._borderCellCss = {\n            'top': `${_stickCellCss}-border-elem-top`,\n            'bottom': `${_stickCellCss}-border-elem-bottom`,\n            'left': `${_stickCellCss}-border-elem-left`,\n            'right': `${_stickCellCss}-border-elem-right`,\n        };\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        const elementsToClear = [];\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            elementsToClear.push(row);\n            for (let i = 0; i < row.children.length; i++) {\n                elementsToClear.push(row.children[i]);\n            }\n        }\n        // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            for (const element of elementsToClear) {\n                this._removeStickyStyle(element, stickyDirections);\n            }\n        });\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n     *     column cell. If `false` cached widths will be used instead.\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true) {\n        if (!rows.length ||\n            !this._isBrowser ||\n            !(stickyStartStates.some(state => state) || stickyEndStates.some(state => state))) {\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({ sizes: [] });\n                this._positionListener.stickyEndColumnsUpdated({ sizes: [] });\n            }\n            return;\n        }\n        const firstRow = rows[0];\n        const numCells = firstRow.children.length;\n        const cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        const lastStickyStart = stickyStartStates.lastIndexOf(true);\n        const firstStickyEnd = stickyEndStates.indexOf(true);\n        // Coalesce with sticky row updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            const isRtl = this.direction === 'rtl';\n            const start = isRtl ? 'right' : 'left';\n            const end = isRtl ? 'left' : 'right';\n            for (const row of rows) {\n                for (let i = 0; i < numCells; i++) {\n                    const cell = row.children[i];\n                    if (stickyStartStates[i]) {\n                        this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n                    }\n                    if (stickyEndStates[i]) {\n                        this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n                    }\n                }\n            }\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({\n                    sizes: lastStickyStart === -1\n                        ? []\n                        : cellWidths\n                            .slice(0, lastStickyStart + 1)\n                            .map((width, index) => (stickyStartStates[index] ? width : null)),\n                });\n                this._positionListener.stickyEndColumnsUpdated({\n                    sizes: firstStickyEnd === -1\n                        ? []\n                        : cellWidths\n                            .slice(firstStickyEnd)\n                            .map((width, index) => (stickyEndStates[index + firstStickyEnd] ? width : null))\n                            .reverse(),\n                });\n            }\n        });\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n        // sticky states need to be reversed as well.\n        const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n        const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n        // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n        const stickyOffsets = [];\n        const stickyCellHeights = [];\n        const elementsToStick = [];\n        for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n            if (!states[rowIndex]) {\n                continue;\n            }\n            stickyOffsets[rowIndex] = stickyOffset;\n            const row = rows[rowIndex];\n            elementsToStick[rowIndex] = this._isNativeHtmlTable\n                ? Array.from(row.children)\n                : [row];\n            const height = row.getBoundingClientRect().height;\n            stickyOffset += height;\n            stickyCellHeights[rowIndex] = height;\n        }\n        const borderedRowIndex = states.lastIndexOf(true);\n        // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n        // (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            var _a, _b;\n            for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n                if (!states[rowIndex]) {\n                    continue;\n                }\n                const offset = stickyOffsets[rowIndex];\n                const isBorderedRowIndex = rowIndex === borderedRowIndex;\n                for (const element of elementsToStick[rowIndex]) {\n                    this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n                }\n            }\n            if (position === 'top') {\n                (_a = this._positionListener) === null || _a === void 0 ? void 0 : _a.stickyHeaderRowsUpdated({\n                    sizes: stickyCellHeights,\n                    offsets: stickyOffsets,\n                    elements: elementsToStick,\n                });\n            }\n            else {\n                (_b = this._positionListener) === null || _b === void 0 ? void 0 : _b.stickyFooterRowsUpdated({\n                    sizes: stickyCellHeights,\n                    offsets: stickyOffsets,\n                    elements: elementsToStick,\n                });\n            }\n        });\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        const tfoot = tableElement.querySelector('tfoot');\n        // Coalesce with other sticky updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            if (stickyStates.some(state => !state)) {\n                this._removeStickyStyle(tfoot, ['bottom']);\n            }\n            else {\n                this._addStickyStyle(tfoot, 'bottom', 0, false);\n            }\n        });\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n            element.classList.remove(this._borderCellCss[dir]);\n        }\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        // Short-circuit checking element.style[dir] for stickyDirections as they\n        // were already removed above.\n        const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n        if (hasDirection) {\n            element.style.zIndex = this._getCalculatedZIndex(element);\n        }\n        else {\n            // When not hasDirection, _getCalculatedZIndex will always return ''.\n            element.style.zIndex = '';\n            if (this._needsPositionStickyOnElement) {\n                element.style.position = '';\n            }\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n    _addStickyStyle(element, dir, dirValue, isBorderElement) {\n        element.classList.add(this._stickCellCss);\n        if (isBorderElement) {\n            element.classList.add(this._borderCellCss[dir]);\n        }\n        element.style[dir] = `${dirValue}px`;\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        if (this._needsPositionStickyOnElement) {\n            element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        }\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n    _getCalculatedZIndex(element) {\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        let zIndex = 0;\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /** Gets the widths for each cell in the provided row. */\n    _getCellWidths(row, recalculateCellWidths = true) {\n        if (!recalculateCellWidths && this._cachedCellWidths.length) {\n            return this._cachedCellWidths;\n        }\n        const cellWidths = [];\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            let cell = firstRowCells[i];\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        this._cachedCellWidths = cellWidths;\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The injection token used to specify the StickyPositioningListener. */\nconst STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass CdkRecycleRows {\n}\nCdkRecycleRows.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nCdkRecycleRows.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: CdkRecycleRows, selector: \"cdk-table[recycleRows], table[cdk-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-table[recycleRows], table[cdk-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                }]\n        }] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nclass DataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nDataRowOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: DataRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nDataRowOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: DataRowOutlet, selector: \"[rowOutlet]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: DataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[rowOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }]; } });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nclass HeaderRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nHeaderRowOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: HeaderRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nHeaderRowOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: HeaderRowOutlet, selector: \"[headerRowOutlet]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: HeaderRowOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[headerRowOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }]; } });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nclass FooterRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nFooterRowOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: FooterRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nFooterRowOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: FooterRowOutlet, selector: \"[footerRowOutlet]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: FooterRowOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[footerRowOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }]; } });\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nclass NoDataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n}\nNoDataRowOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NoDataRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nNoDataRowOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: NoDataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[noDataRowOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }]; } });\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-content select=\"colgroup, col\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container noDataRowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nclass RowViewRef extends EmbeddedViewRef {\n}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nclass CdkTable {\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform, _viewRepeater, _coalescedStyleScheduler, _viewportRuler, \n    /**\n     * @deprecated `_stickyPositioningListener` parameter to become required.\n     * @breaking-change 13.0.0\n     */\n    _stickyPositioningListener, \n    /**\n     * @deprecated `_ngZone` parameter to become required.\n     * @breaking-change 14.0.0\n     */\n    _ngZone) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        this._viewRepeater = _viewRepeater;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._viewportRuler = _viewportRuler;\n        this._stickyPositioningListener = _stickyPositioningListener;\n        this._ngZone = _ngZone;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *its* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *its* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *its* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *its* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n         * change.\n         */\n        this._stickyColumnStylesNeedReset = true;\n        /**\n         * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n         * `false`, cached values will be used instead. This is only applicable to tables with\n         * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n         */\n        this._forceRecalculateCellWidths = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        /**\n         * Whether to manually add positon: sticky to all sticky cell elements. Not needed if\n         * the position is set in a selector associated with the value of stickyCssClass. May be\n         * overridden by table subclasses\n         */\n        this.needsPositionStickyOnElement = true;\n        /** Whether the no data row is currently showing anything. */\n        this._isShowingNoDataRow = false;\n        this._multiTemplateDataRows = false;\n        this._fixedLayout = false;\n        /**\n         * Emits when the table completes rendering a set of data rows based on the latest data from the\n         * data source, even if the set of rows is empty.\n         */\n        this.contentChanged = new EventEmitter();\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * @docs-private\n         */\n        this.viewChange = new BehaviorSubject({\n            start: 0,\n            end: Number.MAX_VALUE,\n        });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'table');\n        }\n        this._document = _document;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    set trackBy(fn) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    set multiTemplateDataRows(v) {\n        this._multiTemplateDataRows = coerceBooleanProperty(v);\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\n     */\n    get fixedLayout() {\n        return this._fixedLayout;\n    }\n    set fixedLayout(v) {\n        this._fixedLayout = coerceBooleanProperty(v);\n        // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n        this._forceRecalculateCellWidths = true;\n        this._stickyColumnStylesNeedReset = true;\n    }\n    ngOnInit() {\n        this._setupStickyStyler();\n        if (this._isNativeHtmlTable) {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            this._forceRecalculateCellWidths = true;\n        });\n    }\n    ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length &&\n            !this._footerRowDefs.length &&\n            !this._rowDefs.length &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        const columnsChanged = this._renderUpdatedColumns();\n        const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n        // Ensure sticky column styles are reset if set to `true` elsewhere.\n        this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n        this._forceRecalculateCellWidths = rowDefsChanged;\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        else if (this._stickyColumnStylesNeedReset) {\n            // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n            // called when it row data arrives. Otherwise, we need to call it proactively.\n            this.updateStickyColumnStyles();\n        }\n        this._checkStickyStates();\n    }\n    ngOnDestroy() {\n        [\n            this._rowOutlet.viewContainer,\n            this._headerRowOutlet.viewContainer,\n            this._footerRowOutlet.viewContainer,\n            this._cachedRenderRowsMap,\n            this._customColumnDefs,\n            this._customRowDefs,\n            this._customHeaderRowDefs,\n            this._customFooterRowDefs,\n            this._columnDefsByName,\n        ].forEach(def => {\n            def.clear();\n        });\n        this._headerRowDefs = [];\n        this._footerRowDefs = [];\n        this._defaultRowDef = null;\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            this._updateNoDataRow();\n            this.contentChanged.next();\n            return;\n        }\n        const viewContainer = this._rowOutlet.viewContainer;\n        this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), record => record.item.data, (change) => {\n            if (change.operation === 1 /* INSERTED */ && change.context) {\n                this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n            }\n        });\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((record) => {\n            const rowView = viewContainer.get(record.currentIndex);\n            rowView.context.$implicit = record.item.data;\n        });\n        this._updateNoDataRow();\n        // Allow the new row data to render before measuring it.\n        // @breaking-change 14.0.0 Remove undefined check once _ngZone is required.\n        if (this._ngZone && NgZone.isInAngularZone()) {\n            this._ngZone.onStable.pipe(take(1), takeUntil(this._onDestroy)).subscribe(() => {\n                this.updateStickyColumnStyles();\n            });\n        }\n        else {\n            this.updateStickyColumnStyles();\n        }\n        this.contentChanged.next();\n    }\n    /** Adds a column definition that was not included as part of the content children. */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /** Removes a column definition that was not included as part of the content children. */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /** Adds a row definition that was not included as part of the content children. */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /** Removes a row definition that was not included as part of the content children. */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /** Adds a header row definition that was not included as part of the content children. */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Removes a header row definition that was not included as part of the content children. */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Adds a footer row definition that was not included as part of the content children. */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Removes a footer row definition that was not included as part of the content children. */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Sets a no data row definition that was not included as a part of the content children. */\n    setNoDataRow(noDataRow) {\n        this._customNoDataRow = noDataRow;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyHeaderRowStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const tableElement = this._elementRef.nativeElement;\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        const thead = tableElement.querySelector('thead');\n        if (thead) {\n            thead.style.display = headerRows.length ? '' : 'none';\n        }\n        const stickyStates = this._headerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyFooterRowStyles() {\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        const tableElement = this._elementRef.nativeElement;\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        const tfoot = tableElement.querySelector('tfoot');\n        if (tfoot) {\n            tfoot.style.display = footerRows.length ? '' : 'none';\n        }\n        const stickyStates = this._footerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n    updateStickyColumnStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n        // In a table using a fixed layout, row content won't affect column width, so sticky styles\n        // don't need to be cleared unless either the sticky column config changes or one of the row\n        // defs change.\n        if ((this._isNativeHtmlTable && !this._fixedLayout) || this._stickyColumnStylesNeedReset) {\n            // Clear the left and right positioning from all columns in the table across all rows since\n            // sticky columns span across all table sections (header, data, footer)\n            this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n            this._stickyColumnStylesNeedReset = false;\n        }\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        });\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach(rowDef => {\n            // Collect all the rows rendered with this row definition.\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        });\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        });\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n    _getAllRenderRows() {\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            let data = this._data[i];\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                let renderRow = renderRowsForData[j];\n                const cache = this._cachedRenderRowsMap.get(renderRow.data);\n                if (cache.has(renderRow.rowDef)) {\n                    cache.get(renderRow.rowDef).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map(rowDef => {\n            const cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];\n            if (cachedRenderRows.length) {\n                const dataRow = cachedRenderRows.shift();\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        });\n    }\n    /** Update the map containing the content's column definitions. */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n        columnDefs.forEach(columnDef => {\n            if (this._columnDefsByName.has(columnDef.name) &&\n                (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        });\n    }\n    /** Update the list of all available row definitions that can be used. */\n    _cacheRowDefs() {\n        this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n        this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n        this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n        if (!this.multiTemplateDataRows &&\n            defaultRowDefs.length > 1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    _renderUpdatedColumns() {\n        const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff();\n        // Force re-render data rows if the list of column definitions have changed.\n        const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n        if (dataColumnsChanged) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed.\n        const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n        if (headerColumnsChanged) {\n            this._forceRenderHeaderRows();\n        }\n        const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n        if (footerColumnsChanged) {\n            this._forceRenderFooterRows();\n        }\n        return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (isObservable(this.dataSource)) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(data => {\n            this._data = data || [];\n            this.renderRows();\n        });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n        this.updateStickyHeaderRowStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n        this.updateStickyFooterRowStyles();\n    }\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n    _addStickyColumnStyles(rows, rowDef) {\n        const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return columnDef;\n        });\n        const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n        const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n    }\n    /** Gets the list of rows that have been rendered in the row outlet. */\n    _getRenderedRows(rowOutlet) {\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            const viewRef = rowOutlet.viewContainer.get(i);\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n        }\n        else {\n            let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    _getEmbeddedViewArgs(renderRow, index) {\n        const rowDef = renderRow.rowDef;\n        const context = { $implicit: renderRow.data };\n        return {\n            templateRef: rowDef.template,\n            context,\n            index,\n        };\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        this._renderCellTemplateForItem(rowDef, context);\n        return view;\n    }\n    _renderCellTemplateForItem(rowDef, context) {\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n    _updateRowIndexContext() {\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            const viewRef = viewContainer.get(renderIndex);\n            const context = viewRef.context;\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /** Gets the column definitions for the provided row def. */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, columnId => {\n            const column = this._columnDefsByName.get(columnId);\n            if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        });\n    }\n    /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n    _applyNativeTableSections() {\n        const documentFragment = this._document.createDocumentFragment();\n        const sections = [\n            { tag: 'thead', outlets: [this._headerRowOutlet] },\n            { tag: 'tbody', outlets: [this._rowOutlet, this._noDataRowOutlet] },\n            { tag: 'tfoot', outlets: [this._footerRowOutlet] },\n        ];\n        for (const section of sections) {\n            const element = this._document.createElement(section.tag);\n            element.setAttribute('role', 'rowgroup');\n            for (const outlet of section.outlets) {\n                element.appendChild(outlet.elementRef.nativeElement);\n            }\n            documentFragment.appendChild(element);\n        }\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\n        this._elementRef.nativeElement.appendChild(documentFragment);\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n    _checkStickyStates() {\n        const stickyCheckReducer = (acc, d) => {\n            return acc || d.hasStickyChanged();\n        };\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this._stickyColumnStylesNeedReset = true;\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n    _setupStickyStyler() {\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        });\n    }\n    /** Filters definitions that belong to this table from a QueryList. */\n    _getOwnDefs(items) {\n        return items.filter(item => !item._table || item._table === this);\n    }\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\n    _updateNoDataRow() {\n        const noDataRow = this._customNoDataRow || this._noDataRow;\n        if (!noDataRow) {\n            return;\n        }\n        const shouldShow = this._rowOutlet.viewContainer.length === 0;\n        if (shouldShow === this._isShowingNoDataRow) {\n            return;\n        }\n        const container = this._noDataRowOutlet.viewContainer;\n        if (shouldShow) {\n            const view = container.createEmbeddedView(noDataRow.templateRef);\n            const rootNode = view.rootNodes[0];\n            // Only add the attributes if we have a single root node since it's hard\n            // to figure out which one to add it to when there are multiple.\n            if (view.rootNodes.length === 1 && (rootNode === null || rootNode === void 0 ? void 0 : rootNode.nodeType) === this._document.ELEMENT_NODE) {\n                rootNode.setAttribute('role', 'row');\n                rootNode.classList.add(noDataRow._contentClassName);\n            }\n        }\n        else {\n            container.clear();\n        }\n        this._isShowingNoDataRow = shouldShow;\n    }\n}\nCdkTable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkTable, deps: [{ token: i0.IterableDiffers }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: 'role', attribute: true }, { token: i1.Directionality, optional: true }, { token: DOCUMENT }, { token: i2.Platform }, { token: _VIEW_REPEATER_STRATEGY }, { token: _COALESCED_STYLE_SCHEDULER }, { token: i3.ViewportRuler }, { token: STICKY_POSITIONING_LISTENER, optional: true, skipSelf: true }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nCdkTable.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: CdkTable, selector: \"cdk-table, table[cdk-table]\", inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: \"multiTemplateDataRows\", fixedLayout: \"fixedLayout\" }, outputs: { contentChanged: \"contentChanged\" }, host: { properties: { \"class.cdk-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"cdk-table\" }, providers: [\n        { provide: CDK_TABLE, useExisting: CdkTable },\n        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n        // Prevent nested tables from seeing this table's StickyPositioningListener.\n        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n    ], queries: [{ propertyName: \"_noDataRow\", first: true, predicate: CdkNoDataRow, descendants: true }, { propertyName: \"_contentColumnDefs\", predicate: CdkColumnDef, descendants: true }, { propertyName: \"_contentRowDefs\", predicate: CdkRowDef, descendants: true }, { propertyName: \"_contentHeaderRowDefs\", predicate: CdkHeaderRowDef, descendants: true }, { propertyName: \"_contentFooterRowDefs\", predicate: CdkFooterRowDef, descendants: true }], viewQueries: [{ propertyName: \"_rowOutlet\", first: true, predicate: DataRowOutlet, descendants: true, static: true }, { propertyName: \"_headerRowOutlet\", first: true, predicate: HeaderRowOutlet, descendants: true, static: true }, { propertyName: \"_footerRowOutlet\", first: true, predicate: FooterRowOutlet, descendants: true, static: true }, { propertyName: \"_noDataRowOutlet\", first: true, predicate: NoDataRowOutlet, descendants: true, static: true }], exportAs: [\"cdkTable\"], ngImport: i0, template: \"\\n  <ng-content select=\\\"caption\\\"></ng-content>\\n  <ng-content select=\\\"colgroup, col\\\"></ng-content>\\n  <ng-container headerRowOutlet></ng-container>\\n  <ng-container rowOutlet></ng-container>\\n  <ng-container noDataRowOutlet></ng-container>\\n  <ng-container footerRowOutlet></ng-container>\\n\", isInline: true, styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"], directives: [{ type: HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { type: DataRowOutlet, selector: \"[rowOutlet]\" }, { type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }, { type: FooterRowOutlet, selector: \"[footerRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-table, table[cdk-table]', exportAs: 'cdkTable', template: CDK_TABLE_TEMPLATE, host: {\n                        'class': 'cdk-table',\n                        '[class.cdk-table-fixed-layout]': 'fixedLayout',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [\n                        { provide: CDK_TABLE, useExisting: CdkTable },\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], styles: [\".cdk-table-fixed-layout{table-layout:fixed}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.IterableDiffers }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['role']\n                    }] }, { type: i1.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i2.Platform }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [_VIEW_REPEATER_STRATEGY]\n                    }] }, { type: _CoalescedStyleScheduler, decorators: [{\n                        type: Inject,\n                        args: [_COALESCED_STYLE_SCHEDULER]\n                    }] }, { type: i3.ViewportRuler }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }, {\n                        type: Inject,\n                        args: [STICKY_POSITIONING_LISTENER]\n                    }] }, { type: i0.NgZone, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { trackBy: [{\n                type: Input\n            }], dataSource: [{\n                type: Input\n            }], multiTemplateDataRows: [{\n                type: Input\n            }], fixedLayout: [{\n                type: Input\n            }], contentChanged: [{\n                type: Output\n            }], _rowOutlet: [{\n                type: ViewChild,\n                args: [DataRowOutlet, { static: true }]\n            }], _headerRowOutlet: [{\n                type: ViewChild,\n                args: [HeaderRowOutlet, { static: true }]\n            }], _footerRowOutlet: [{\n                type: ViewChild,\n                args: [FooterRowOutlet, { static: true }]\n            }], _noDataRowOutlet: [{\n                type: ViewChild,\n                args: [NoDataRowOutlet, { static: true }]\n            }], _contentColumnDefs: [{\n                type: ContentChildren,\n                args: [CdkColumnDef, { descendants: true }]\n            }], _contentRowDefs: [{\n                type: ContentChildren,\n                args: [CdkRowDef, { descendants: true }]\n            }], _contentHeaderRowDefs: [{\n                type: ContentChildren,\n                args: [CdkHeaderRowDef, {\n                        descendants: true,\n                    }]\n            }], _contentFooterRowDefs: [{\n                type: ContentChildren,\n                args: [CdkFooterRowDef, {\n                        descendants: true,\n                    }]\n            }], _noDataRow: [{\n                type: ContentChild,\n                args: [CdkNoDataRow]\n            }] } });\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n    return array.concat(Array.from(set));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass CdkTextColumn {\n    constructor(\n    // `CdkTextColumn` is always requiring a table, but we just assert it manually\n    // for better error reporting.\n    // tslint:disable-next-line: lightweight-tokens\n    _table, _options) {\n        this._table = _table;\n        this._options = _options;\n        /** Alignment of the cell values. */\n        this.justify = 'start';\n        this._options = _options || {};\n    }\n    /** Column name that should be used to reference this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((data, name) => data[name]);\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n    _createDefaultHeaderText() {\n        const name = this.name;\n        if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /** Synchronizes the column definition name with the text column name. */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n}\nCdkTextColumn.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkTextColumn, deps: [{ token: CdkTable, optional: true }, { token: TEXT_COLUMN_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nCdkTextColumn.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: CdkTextColumn, selector: \"cdk-text-column\", inputs: { name: \"name\", headerText: \"headerText\", dataAccessor: \"dataAccessor\", justify: \"justify\" }, viewQueries: [{ propertyName: \"columnDef\", first: true, predicate: CdkColumnDef, descendants: true, static: true }, { propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true, static: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true, static: true }], ngImport: i0, template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, directives: [{ type: CdkColumnDef, selector: \"[cdkColumnDef]\", inputs: [\"sticky\", \"cdkColumnDef\", \"stickyEnd\"] }, { type: CdkHeaderCellDef, selector: \"[cdkHeaderCellDef]\" }, { type: CdkHeaderCell, selector: \"cdk-header-cell, th[cdk-header-cell]\" }, { type: CdkCellDef, selector: \"[cdkCellDef]\" }, { type: CdkCell, selector: \"cdk-cell, td[cdk-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-text-column',\n                    template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                }]\n        }], ctorParameters: function () {\n        return [{ type: CdkTable, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [TEXT_COLUMN_OPTIONS]\n                    }] }];\n    }, propDecorators: { name: [{\n                type: Input\n            }], headerText: [{\n                type: Input\n            }], dataAccessor: [{\n                type: Input\n            }], justify: [{\n                type: Input\n            }], columnDef: [{\n                type: ViewChild,\n                args: [CdkColumnDef, { static: true }]\n            }], cell: [{\n                type: ViewChild,\n                args: [CdkCellDef, { static: true }]\n            }], headerCell: [{\n                type: ViewChild,\n                args: [CdkHeaderCellDef, { static: true }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n    CdkNoDataRow,\n    CdkRecycleRows,\n    NoDataRowOutlet,\n];\nclass CdkTableModule {\n}\nCdkTableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCdkTableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkTableModule, declarations: [CdkTable,\n        CdkRowDef,\n        CdkCellDef,\n        CdkCellOutlet,\n        CdkHeaderCellDef,\n        CdkFooterCellDef,\n        CdkColumnDef,\n        CdkCell,\n        CdkRow,\n        CdkHeaderCell,\n        CdkFooterCell,\n        CdkHeaderRow,\n        CdkHeaderRowDef,\n        CdkFooterRow,\n        CdkFooterRowDef,\n        DataRowOutlet,\n        HeaderRowOutlet,\n        FooterRowOutlet,\n        CdkTextColumn,\n        CdkNoDataRow,\n        CdkRecycleRows,\n        NoDataRowOutlet], imports: [ScrollingModule], exports: [CdkTable,\n        CdkRowDef,\n        CdkCellDef,\n        CdkCellOutlet,\n        CdkHeaderCellDef,\n        CdkFooterCellDef,\n        CdkColumnDef,\n        CdkCell,\n        CdkRow,\n        CdkHeaderCell,\n        CdkFooterCell,\n        CdkHeaderRow,\n        CdkHeaderRowDef,\n        CdkFooterRow,\n        CdkFooterRowDef,\n        DataRowOutlet,\n        HeaderRowOutlet,\n        FooterRowOutlet,\n        CdkTextColumn,\n        CdkNoDataRow,\n        CdkRecycleRows,\n        NoDataRowOutlet] });\nCdkTableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkTableModule, imports: [[ScrollingModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: CdkTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: EXPORTED_DECLARATIONS,\n                    declarations: EXPORTED_DECLARATIONS,\n                    imports: [ScrollingModule],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRecycleRows, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };\n","import { Observable } from '../Observable';\nexport function isObservable(obj) {\n    return !!obj && (obj instanceof Observable || (typeof obj.lift === 'function' && typeof obj.subscribe === 'function'));\n}\n","import * as i0 from '@angular/core';\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/table';\nimport { CdkTable, CDK_TABLE, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, STICKY_POSITIONING_LISTENER, CDK_TABLE_TEMPLATE, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CDK_ROW_TEMPLATE, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule, DataSource } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { BehaviorSubject, Subject, merge, of, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass MatRecycleRows {\n}\nMatRecycleRows.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatRecycleRows.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatRecycleRows, selector: \"mat-table[recycleRows], table[mat-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-table[recycleRows], table[mat-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                }]\n        }] });\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nclass MatTable extends CdkTable {\n    constructor() {\n        super(...arguments);\n        /** Overrides the sticky CSS class set by the `CdkTable`. */\n        this.stickyCssClass = 'mat-table-sticky';\n        /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n        this.needsPositionStickyOnElement = false;\n    }\n}\nMatTable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatTable, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatTable.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatTable, selector: \"mat-table, table[mat-table]\", host: { properties: { \"class.mat-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"mat-table\" }, providers: [\n        // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n        //  is only included in the build if used.\n        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n        { provide: CdkTable, useExisting: MatTable },\n        { provide: CDK_TABLE, useExisting: MatTable },\n        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n        // Prevent nested tables from seeing this table's StickyPositioningListener.\n        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n    ], exportAs: [\"matTable\"], usesInheritance: true, ngImport: i0, template: \"\\n  <ng-content select=\\\"caption\\\"></ng-content>\\n  <ng-content select=\\\"colgroup, col\\\"></ng-content>\\n  <ng-container headerRowOutlet></ng-container>\\n  <ng-container rowOutlet></ng-container>\\n  <ng-container noDataRowOutlet></ng-container>\\n  <ng-container footerRowOutlet></ng-container>\\n\", isInline: true, styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:-webkit-sticky !important;position:sticky !important}.mat-table-fixed-layout{table-layout:fixed}\\n\"], directives: [{ type: i1.HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { type: i1.DataRowOutlet, selector: \"[rowOutlet]\" }, { type: i1.NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }, { type: i1.FooterRowOutlet, selector: \"[footerRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-table, table[mat-table]', exportAs: 'matTable', template: CDK_TABLE_TEMPLATE, host: {\n                        'class': 'mat-table',\n                        '[class.mat-table-fixed-layout]': 'fixedLayout',\n                    }, providers: [\n                        // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n                        //  is only included in the build if used.\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        { provide: CdkTable, useExisting: MatTable },\n                        { provide: CDK_TABLE, useExisting: MatTable },\n                        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-row,tr.mat-footer-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}th.mat-header-cell,td.mat-cell,td.mat-footer-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}th.mat-header-cell:first-of-type,td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] th.mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:first-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}th.mat-header-cell:last-of-type,td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] th.mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-cell:last-of-type:not(:only-of-type),[dir=rtl] td.mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}.mat-table-sticky{position:-webkit-sticky !important;position:sticky !important}.mat-table-fixed-layout{table-layout:fixed}\\n\"] }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass MatCellDef extends CdkCellDef {\n}\nMatCellDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatCellDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatCellDef, selector: \"[matCellDef]\", providers: [{ provide: CdkCellDef, useExisting: MatCellDef }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matCellDef]',\n                    providers: [{ provide: CdkCellDef, useExisting: MatCellDef }],\n                }]\n        }] });\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass MatHeaderCellDef extends CdkHeaderCellDef {\n}\nMatHeaderCellDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatHeaderCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatHeaderCellDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatHeaderCellDef, selector: \"[matHeaderCellDef]\", providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matHeaderCellDef]',\n                    providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }],\n                }]\n        }] });\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass MatFooterCellDef extends CdkFooterCellDef {\n}\nMatFooterCellDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatFooterCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatFooterCellDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatFooterCellDef, selector: \"[matFooterCellDef]\", providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matFooterCellDef]',\n                    providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }],\n                }]\n        }] });\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nclass MatColumnDef extends CdkColumnDef {\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    /**\n     * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n     * In the future, this will only add \"mat-column-\" and columnCssClassName\n     * will change from type string[] to string.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        super._updateColumnCssClassName();\n        this._columnCssClassName.push(`mat-column-${this.cssClassFriendlyName}`);\n    }\n}\nMatColumnDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatColumnDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatColumnDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatColumnDef, selector: \"[matColumnDef]\", inputs: { sticky: \"sticky\", name: [\"matColumnDef\", \"name\"] }, providers: [\n        { provide: CdkColumnDef, useExisting: MatColumnDef },\n        { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef },\n    ], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matColumnDef]',\n                    inputs: ['sticky'],\n                    providers: [\n                        { provide: CdkColumnDef, useExisting: MatColumnDef },\n                        { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef },\n                    ],\n                }]\n        }], propDecorators: { name: [{\n                type: Input,\n                args: ['matColumnDef']\n            }] } });\n/** Header cell template container that adds the right classes and role. */\nclass MatHeaderCell extends CdkHeaderCell {\n}\nMatHeaderCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatHeaderCell, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatHeaderCell.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatHeaderCell, selector: \"mat-header-cell, th[mat-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"mat-header-cell\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-header-cell, th[mat-header-cell]',\n                    host: {\n                        'class': 'mat-header-cell',\n                        'role': 'columnheader',\n                    },\n                }]\n        }] });\n/** Footer cell template container that adds the right classes and role. */\nclass MatFooterCell extends CdkFooterCell {\n}\nMatFooterCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatFooterCell, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatFooterCell.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatFooterCell, selector: \"mat-footer-cell, td[mat-footer-cell]\", host: { attributes: { \"role\": \"gridcell\" }, classAttribute: \"mat-footer-cell\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-footer-cell, td[mat-footer-cell]',\n                    host: {\n                        'class': 'mat-footer-cell',\n                        'role': 'gridcell',\n                    },\n                }]\n        }] });\n/** Cell template container that adds the right classes and role. */\nclass MatCell extends CdkCell {\n}\nMatCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatCell, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatCell.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatCell, selector: \"mat-cell, td[mat-cell]\", host: { attributes: { \"role\": \"gridcell\" }, classAttribute: \"mat-cell\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-cell, td[mat-cell]',\n                    host: {\n                        'class': 'mat-cell',\n                        'role': 'gridcell',\n                    },\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass MatHeaderRowDef extends CdkHeaderRowDef {\n}\nMatHeaderRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatHeaderRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatHeaderRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatHeaderRowDef, selector: \"[matHeaderRowDef]\", inputs: { columns: [\"matHeaderRowDef\", \"columns\"], sticky: [\"matHeaderRowDefSticky\", \"sticky\"] }, providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matHeaderRowDef]',\n                    providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\n                    inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n                }]\n        }] });\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass MatFooterRowDef extends CdkFooterRowDef {\n}\nMatFooterRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatFooterRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatFooterRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatFooterRowDef, selector: \"[matFooterRowDef]\", inputs: { columns: [\"matFooterRowDef\", \"columns\"], sticky: [\"matFooterRowDefSticky\", \"sticky\"] }, providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matFooterRowDef]',\n                    providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }],\n                    inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n                }]\n        }] });\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass MatRowDef extends CdkRowDef {\n}\nMatRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatRowDef, selector: \"[matRowDef]\", inputs: { columns: [\"matRowDefColumns\", \"columns\"], when: [\"matRowDefWhen\", \"when\"] }, providers: [{ provide: CdkRowDef, useExisting: MatRowDef }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matRowDef]',\n                    providers: [{ provide: CdkRowDef, useExisting: MatRowDef }],\n                    inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n                }]\n        }] });\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass MatHeaderRow extends CdkHeaderRow {\n}\nMatHeaderRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatHeaderRow, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatHeaderRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatHeaderRow, selector: \"mat-header-row, tr[mat-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-header-row\" }, providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }], exportAs: [\"matHeaderRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, directives: [{ type: i1.CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-header-row, tr[mat-header-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matHeaderRow',\n                    providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }],\n                }]\n        }] });\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass MatFooterRow extends CdkFooterRow {\n}\nMatFooterRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatFooterRow, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatFooterRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatFooterRow, selector: \"mat-footer-row, tr[mat-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-footer-row\" }, providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }], exportAs: [\"matFooterRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, directives: [{ type: i1.CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-footer-row, tr[mat-footer-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-footer-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matFooterRow',\n                    providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }],\n                }]\n        }] });\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass MatRow extends CdkRow {\n}\nMatRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatRow, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatRow, selector: \"mat-row, tr[mat-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-row\" }, providers: [{ provide: CdkRow, useExisting: MatRow }], exportAs: [\"matRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, directives: [{ type: i1.CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-row, tr[mat-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matRow',\n                    providers: [{ provide: CdkRow, useExisting: MatRow }],\n                }]\n        }] });\n/** Row that can be used to display a message when no data is shown in the table. */\nclass MatNoDataRow extends CdkNoDataRow {\n    constructor() {\n        super(...arguments);\n        this._contentClassName = 'mat-no-data-row';\n    }\n}\nMatNoDataRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatNoDataRow, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatNoDataRow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatNoDataRow, selector: \"ng-template[matNoDataRow]\", providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matNoDataRow]',\n                    providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass MatTextColumn extends CdkTextColumn {\n}\nMatTextColumn.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatTextColumn, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatTextColumn.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatTextColumn, selector: \"mat-text-column\", usesInheritance: true, ngImport: i0, template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, directives: [{ type: MatColumnDef, selector: \"[matColumnDef]\", inputs: [\"sticky\", \"matColumnDef\"] }, { type: MatHeaderCellDef, selector: \"[matHeaderCellDef]\" }, { type: MatHeaderCell, selector: \"mat-header-cell, th[mat-header-cell]\" }, { type: MatCellDef, selector: \"[matCellDef]\" }, { type: MatCell, selector: \"mat-cell, td[mat-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-text-column',\n                    template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst EXPORTED_DECLARATIONS = [\n    // Table\n    MatTable,\n    MatRecycleRows,\n    // Template defs\n    MatHeaderCellDef,\n    MatHeaderRowDef,\n    MatColumnDef,\n    MatCellDef,\n    MatRowDef,\n    MatFooterCellDef,\n    MatFooterRowDef,\n    // Cell directives\n    MatHeaderCell,\n    MatCell,\n    MatFooterCell,\n    // Row directives\n    MatHeaderRow,\n    MatRow,\n    MatFooterRow,\n    MatNoDataRow,\n    MatTextColumn,\n];\nclass MatTableModule {\n}\nMatTableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatTableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatTableModule, declarations: [\n        // Table\n        MatTable,\n        MatRecycleRows,\n        // Template defs\n        MatHeaderCellDef,\n        MatHeaderRowDef,\n        MatColumnDef,\n        MatCellDef,\n        MatRowDef,\n        MatFooterCellDef,\n        MatFooterRowDef,\n        // Cell directives\n        MatHeaderCell,\n        MatCell,\n        MatFooterCell,\n        // Row directives\n        MatHeaderRow,\n        MatRow,\n        MatFooterRow,\n        MatNoDataRow,\n        MatTextColumn\n    ], imports: [CdkTableModule, MatCommonModule], exports: [MatCommonModule,\n        // Table\n        MatTable,\n        MatRecycleRows,\n        // Template defs\n        MatHeaderCellDef,\n        MatHeaderRowDef,\n        MatColumnDef,\n        MatCellDef,\n        MatRowDef,\n        MatFooterCellDef,\n        MatFooterRowDef,\n        // Cell directives\n        MatHeaderCell,\n        MatCell,\n        MatFooterCell,\n        // Row directives\n        MatHeaderRow,\n        MatRow,\n        MatFooterRow,\n        MatNoDataRow,\n        MatTextColumn] });\nMatTableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatTableModule, imports: [[CdkTableModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkTableModule, MatCommonModule],\n                    exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n                    declarations: EXPORTED_DECLARATIONS,\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/** Shared base class with MDC-based implementation. */\nclass _MatTableDataSource extends DataSource {\n    constructor(initialData = []) {\n        super();\n        /** Stream emitting render data to the table (depends on ordered data changes). */\n        this._renderData = new BehaviorSubject([]);\n        /** Stream that emits when a new filter string is set on the data source. */\n        this._filter = new BehaviorSubject('');\n        /** Used to react to internal changes of the paginator that are made by the data source itself. */\n        this._internalPageChanges = new Subject();\n        /**\n         * Subscription to the changes that should trigger an update to the table's rendered rows, such\n         * as filtering, sorting, pagination, or base data changes.\n         */\n        this._renderChangesSubscription = null;\n        /**\n         * Data accessor function that is used for accessing data properties for sorting through\n         * the default sortData function.\n         * This default function assumes that the sort header IDs (which defaults to the column name)\n         * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n         * May be set to a custom function for different behavior.\n         * @param data Data object that is being accessed.\n         * @param sortHeaderId The name of the column that represents the data.\n         */\n        this.sortingDataAccessor = (data, sortHeaderId) => {\n            const value = data[sortHeaderId];\n            if (_isNumberValue(value)) {\n                const numberValue = Number(value);\n                // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n                // leave them as strings. For more info: https://goo.gl/y5vbSg\n                return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n            }\n            return value;\n        };\n        /**\n         * Gets a sorted copy of the data array based on the state of the MatSort. Called\n         * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n         * By default, the function retrieves the active sort and its direction and compares data\n         * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n         * of data ordering.\n         * @param data The array of data that should be sorted.\n         * @param sort The connected MatSort that holds the current sort state.\n         */\n        this.sortData = (data, sort) => {\n            const active = sort.active;\n            const direction = sort.direction;\n            if (!active || direction == '') {\n                return data;\n            }\n            return data.sort((a, b) => {\n                let valueA = this.sortingDataAccessor(a, active);\n                let valueB = this.sortingDataAccessor(b, active);\n                // If there are data in the column that can be converted to a number,\n                // it must be ensured that the rest of the data\n                // is of the same type so as not to order incorrectly.\n                const valueAType = typeof valueA;\n                const valueBType = typeof valueB;\n                if (valueAType !== valueBType) {\n                    if (valueAType === 'number') {\n                        valueA += '';\n                    }\n                    if (valueBType === 'number') {\n                        valueB += '';\n                    }\n                }\n                // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n                // one value exists while the other doesn't. In this case, existing value should come last.\n                // This avoids inconsistent results when comparing values to undefined/null.\n                // If neither value exists, return 0 (equal).\n                let comparatorResult = 0;\n                if (valueA != null && valueB != null) {\n                    // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n                    if (valueA > valueB) {\n                        comparatorResult = 1;\n                    }\n                    else if (valueA < valueB) {\n                        comparatorResult = -1;\n                    }\n                }\n                else if (valueA != null) {\n                    comparatorResult = 1;\n                }\n                else if (valueB != null) {\n                    comparatorResult = -1;\n                }\n                return comparatorResult * (direction == 'asc' ? 1 : -1);\n            });\n        };\n        /**\n         * Checks if a data object matches the data source's filter string. By default, each data object\n         * is converted to a string of its properties and returns true if the filter has\n         * at least one occurrence in that string. By default, the filter string has its whitespace\n         * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n         * filter matching.\n         * @param data Data object used to check against the filter.\n         * @param filter Filter string that has been set on the data source.\n         * @returns Whether the filter matches against the data\n         */\n        this.filterPredicate = (data, filter) => {\n            // Transform the data into a lowercase string of all property values.\n            const dataStr = Object.keys(data)\n                .reduce((currentTerm, key) => {\n                // Use an obscure Unicode character to delimit the words in the concatenated string.\n                // This avoids matches where the values of two columns combined will match the user's query\n                // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n                // that has a very low chance of being typed in by somebody in a text field. This one in\n                // particular is \"White up-pointing triangle with dot\" from\n                // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n                return currentTerm + data[key] + '◬';\n            }, '')\n                .toLowerCase();\n            // Transform the filter by converting it to lowercase and removing whitespace.\n            const transformedFilter = filter.trim().toLowerCase();\n            return dataStr.indexOf(transformedFilter) != -1;\n        };\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    /** Array of data that should be rendered by the table, where each object represents one row. */\n    get data() {\n        return this._data.value;\n    }\n    set data(data) {\n        data = Array.isArray(data) ? data : [];\n        this._data.next(data);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(data);\n        }\n    }\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     */\n    get filter() {\n        return this._filter.value;\n    }\n    set filter(filter) {\n        this._filter.next(filter);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(this.data);\n        }\n    }\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     */\n    get sort() {\n        return this._sort;\n    }\n    set sort(sort) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Instance of the MatPaginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     */\n    get paginator() {\n        return this._paginator;\n    }\n    set paginator(paginator) {\n        this._paginator = paginator;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     */\n    _updateChangeSubscription() {\n        var _a;\n        // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n        // The events should emit whenever the component emits a change or initializes, or if no\n        // component is provided, a stream with just a null event should be provided.\n        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n        // pipeline can progress to the next step. Note that the value from these streams are not used,\n        // they purely act as a signal to progress in the pipeline.\n        const sortChange = this._sort\n            ? merge(this._sort.sortChange, this._sort.initialized)\n            : of(null);\n        const pageChange = this._paginator\n            ? merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized)\n            : of(null);\n        const dataStream = this._data;\n        // Watch for base data or filter changes to provide a filtered set of data.\n        const filteredData = combineLatest([dataStream, this._filter]).pipe(map(([data]) => this._filterData(data)));\n        // Watch for filtered data or sort changes to provide an ordered set of data.\n        const orderedData = combineLatest([filteredData, sortChange]).pipe(map(([data]) => this._orderData(data)));\n        // Watch for ordered data or page changes to provide a paged set of data.\n        const paginatedData = combineLatest([orderedData, pageChange]).pipe(map(([data]) => this._pageData(data)));\n        // Watched for paged data changes and send the result to the table to render.\n        (_a = this._renderChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n        this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     */\n    _filterData(data) {\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterTermAccessor.\n        // May be overridden for customization.\n        this.filteredData =\n            this.filter == null || this.filter === ''\n                ? data\n                : data.filter(obj => this.filterPredicate(obj, this.filter));\n        if (this.paginator) {\n            this._updatePaginator(this.filteredData.length);\n        }\n        return this.filteredData;\n    }\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     */\n    _orderData(data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort) {\n            return data;\n        }\n        return this.sortData(data.slice(), this.sort);\n    }\n    /**\n     * Returns a paged slice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     */\n    _pageData(data) {\n        if (!this.paginator) {\n            return data;\n        }\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice(startIndex, startIndex + this.paginator.pageSize);\n    }\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     */\n    _updatePaginator(filteredDataLength) {\n        Promise.resolve().then(() => {\n            const paginator = this.paginator;\n            if (!paginator) {\n                return;\n            }\n            paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (paginator.pageIndex > 0) {\n                const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n                const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n                if (newPageIndex !== paginator.pageIndex) {\n                    paginator.pageIndex = newPageIndex;\n                    // Since the paginator only emits after user-generated changes,\n                    // we need our own stream so we know to should re-render the data.\n                    this._internalPageChanges.next();\n                }\n            }\n        });\n    }\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * @docs-private\n     */\n    connect() {\n        if (!this._renderChangesSubscription) {\n            this._updateChangeSubscription();\n        }\n        return this._renderData;\n    }\n    /**\n     * Used by the MatTable. Called when it disconnects from the data source.\n     * @docs-private\n     */\n    disconnect() {\n        var _a;\n        (_a = this._renderChangesSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n        this._renderChangesSubscription = null;\n    }\n}\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nclass MatTableDataSource extends _MatTableDataSource {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCell, MatCellDef, MatColumnDef, MatFooterCell, MatFooterCellDef, MatFooterRow, MatFooterRowDef, MatHeaderCell, MatHeaderCellDef, MatHeaderRow, MatHeaderRowDef, MatNoDataRow, MatRecycleRows, MatRow, MatRowDef, MatTable, MatTableDataSource, MatTableModule, MatTextColumn, _MatTableDataSource };\n","import * as i1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i4 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i7 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Input, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i6 from '@angular/cdk/layout';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i3 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\nimport * as i5 from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nconst matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n            style({ opacity: 0, transform: 'scale(0)', offset: 0 }),\n            style({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),\n            style({ opacity: 1, transform: 'scale(1)', offset: 1 }),\n        ]))),\n        transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 0 }))),\n    ]),\n};\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\nclass _MatTooltipBase {\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._disabled = false;\n        this._viewInitialized = false;\n        this._pointerExitEventsInitialized = false;\n        this._viewportMargin = 8;\n        this._cssClassPrefix = 'mat';\n        this._showDelay = this._defaultOptions.showDelay;\n        this._hideDelay = this._defaultOptions.hideDelay;\n        /**\n         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n         * uses a long press gesture to show and hide, however it can conflict with the native browser\n         * gestures. To work around the conflict, Angular Material disables native gestures on the\n         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n         * elements). The different values for this option configure the touch event handling as follows:\n         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n         *   browser gestures on particular elements. In particular, it allows text selection on inputs\n         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n         * - `on` - Enables touch gestures for all elements and disables native\n         *   browser gestures with no exceptions.\n         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n         *   showing on touch devices.\n         */\n        this.touchGestures = 'auto';\n        this._message = '';\n        /** Manually-bound passive event listeners. */\n        this._passiveListeners = [];\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        this._scrollStrategy = scrollStrategy;\n        this._document = _document;\n        if (_defaultOptions) {\n            if (_defaultOptions.position) {\n                this.position = _defaultOptions.position;\n            }\n            if (_defaultOptions.touchGestures) {\n                this.touchGestures = _defaultOptions.touchGestures;\n            }\n        }\n        _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n            }\n        });\n    }\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    get position() {\n        return this._position;\n    }\n    set position(value) {\n        var _a;\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n                (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a.show(0);\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /** Disables the display of the tooltip. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n        }\n    }\n    /** The default delay in ms before showing the tooltip after show is called */\n    get showDelay() {\n        return this._showDelay;\n    }\n    set showDelay(value) {\n        this._showDelay = coerceNumberProperty(value);\n    }\n    /** The default delay in ms before hiding the tooltip after hide is called */\n    get hideDelay() {\n        return this._hideDelay;\n    }\n    set hideDelay(value) {\n        this._hideDelay = coerceNumberProperty(value);\n    }\n    /** The message to be displayed in the tooltip */\n    get message() {\n        return this._message;\n    }\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip');\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n        // away the string-conversion: https://github.com/angular/components/issues/20684\n        this._message = value != null ? String(value).trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n            this._updateTooltipMessage();\n            this._ngZone.runOutsideAngular(() => {\n                // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                Promise.resolve().then(() => {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n                });\n            });\n        }\n    }\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    get tooltipClass() {\n        return this._tooltipClass;\n    }\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    ngAfterViewInit() {\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._viewInitialized = true;\n        this._setupPointerEnterEventsIfNeeded();\n        this._focusMonitor\n            .monitor(this._elementRef)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                this._ngZone.run(() => this.hide(0));\n            }\n            else if (origin === 'keyboard') {\n                this._ngZone.run(() => this.show());\n            }\n        });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy() {\n        const nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        this._passiveListeners.forEach(([event, listener]) => {\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n        this._passiveListeners.length = 0;\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n        this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay = this.showDelay) {\n        if (this.disabled ||\n            !this.message ||\n            (this._isTooltipVisible() &&\n                !this._tooltipInstance._showTimeoutId &&\n                !this._tooltipInstance._hideTimeoutId)) {\n            return;\n        }\n        const overlayRef = this._createOverlay();\n        this._detach();\n        this._portal =\n            this._portal || new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n        this._tooltipInstance = overlayRef.attach(this._portal).instance;\n        this._tooltipInstance\n            .afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        this._tooltipInstance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay = this.hideDelay) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.hide(delay);\n        }\n    }\n    /** Shows/hides the tooltip */\n    toggle() {\n        this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n    _createOverlay() {\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._elementRef)\n            .withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`)\n            .withFlexibleDimensions(false)\n            .withViewportMargin(this._viewportMargin)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            this._updateCurrentPositionClass(change.connectionPair);\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide(0));\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,\n            scrollStrategy: this._scrollStrategy(),\n        });\n        this._updatePosition(this._overlayRef);\n        this._overlayRef\n            .detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._overlayRef\n            .outsidePointerEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => { var _a; return (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a._handleBodyInteraction(); });\n        this._overlayRef\n            .keydownEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(event => {\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this._ngZone.run(() => this.hide(0));\n            }\n        });\n        return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n    _updatePosition(overlayRef) {\n        const position = overlayRef.getConfig().positionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            this._addOffset(Object.assign(Object.assign({}, origin.main), overlay.main)),\n            this._addOffset(Object.assign(Object.assign({}, origin.fallback), overlay.fallback)),\n        ]);\n    }\n    /** Adds the configured offset to a position. Used as a hook for child classes. */\n    _addOffset(position) {\n        return position;\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y },\n        };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y },\n        };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                if (this._tooltipInstance) {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n    }\n    /** Updates the tooltip class */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /** Inverts an overlay position. */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n    /** Updates the class on the overlay panel based on the current position of the tooltip. */\n    _updateCurrentPositionClass(connectionPair) {\n        const { overlayY, originX, originY } = connectionPair;\n        let newPosition;\n        // If the overlay is in the middle along the Y axis,\n        // it means that it's either before or after.\n        if (overlayY === 'center') {\n            // Note that since this information is used for styling, we want to\n            // resolve `start` and `end` to their real values, otherwise consumers\n            // would have to remember to do it themselves on each consumption.\n            if (this._dir && this._dir.value === 'rtl') {\n                newPosition = originX === 'end' ? 'left' : 'right';\n            }\n            else {\n                newPosition = originX === 'start' ? 'left' : 'right';\n            }\n        }\n        else {\n            newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n        }\n        if (newPosition !== this._currentPosition) {\n            const overlayRef = this._overlayRef;\n            if (overlayRef) {\n                const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n                overlayRef.removePanelClass(classPrefix + this._currentPosition);\n                overlayRef.addPanelClass(classPrefix + newPosition);\n            }\n            this._currentPosition = newPosition;\n        }\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n    _setupPointerEnterEventsIfNeeded() {\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n        if (this._disabled ||\n            !this.message ||\n            !this._viewInitialized ||\n            this._passiveListeners.length) {\n            return;\n        }\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (this._platformSupportsMouseEvents()) {\n            this._passiveListeners.push([\n                'mouseenter',\n                () => {\n                    this._setupPointerExitEventsIfNeeded();\n                    this.show();\n                },\n            ]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            this._passiveListeners.push([\n                'touchstart',\n                () => {\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    this._setupPointerExitEventsIfNeeded();\n                    clearTimeout(this._touchstartTimeout);\n                    this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n                },\n            ]);\n        }\n        this._addListeners(this._passiveListeners);\n    }\n    _setupPointerExitEventsIfNeeded() {\n        if (this._pointerExitEventsInitialized) {\n            return;\n        }\n        this._pointerExitEventsInitialized = true;\n        const exitListeners = [];\n        if (this._platformSupportsMouseEvents()) {\n            exitListeners.push(['mouseleave', () => this.hide()], ['wheel', event => this._wheelListener(event)]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            const touchendListener = () => {\n                clearTimeout(this._touchstartTimeout);\n                this.hide(this._defaultOptions.touchendHideDelay);\n            };\n            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n        }\n        this._addListeners(exitListeners);\n        this._passiveListeners.push(...exitListeners);\n    }\n    _addListeners(listeners) {\n        listeners.forEach(([event, listener]) => {\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n    }\n    _platformSupportsMouseEvents() {\n        return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n    _wheelListener(event) {\n        if (this._isTooltipVisible()) {\n            const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n            const element = this._elementRef.nativeElement;\n            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n            // won't fire if the user scrolls away using the wheel without moving their cursor. We\n            // work around it by finding the element under the user's cursor and closing the tooltip\n            // if it's not the trigger.\n            if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n                this.hide();\n            }\n        }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n    _disableNativeGesturesIfNecessary() {\n        const gestures = this.touchGestures;\n        if (gestures !== 'off') {\n            const element = this._elementRef.nativeElement;\n            const style = element.style;\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\n            // textareas, because it prevents the user from typing into them on iOS Safari.\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                style.userSelect =\n                    style.msUserSelect =\n                        style.webkitUserSelect =\n                            style.MozUserSelect =\n                                'none';\n            }\n            // If we have `auto` gestures and the element uses native HTML dragging,\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\n            if (gestures === 'on' || !element.draggable) {\n                style.webkitUserDrag = 'none';\n            }\n            style.touchAction = 'none';\n            style.webkitTapHighlightColor = 'transparent';\n        }\n    }\n}\n_MatTooltipBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: _MatTooltipBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatTooltipBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: _MatTooltipBase, inputs: { position: [\"matTooltipPosition\", \"position\"], disabled: [\"matTooltipDisabled\", \"disabled\"], showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: _MatTooltipBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i2.ScrollDispatcher }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i3.Platform }, { type: i4.AriaDescriber }, { type: i4.FocusMonitor }, { type: undefined }, { type: i5.Directionality }, { type: undefined }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    }, propDecorators: { position: [{\n                type: Input,\n                args: ['matTooltipPosition']\n            }], disabled: [{\n                type: Input,\n                args: ['matTooltipDisabled']\n            }], showDelay: [{\n                type: Input,\n                args: ['matTooltipShowDelay']\n            }], hideDelay: [{\n                type: Input,\n                args: ['matTooltipHideDelay']\n            }], touchGestures: [{\n                type: Input,\n                args: ['matTooltipTouchGestures']\n            }], message: [{\n                type: Input,\n                args: ['matTooltip']\n            }], tooltipClass: [{\n                type: Input,\n                args: ['matTooltipClass']\n            }] } });\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip extends _MatTooltipBase {\n    constructor(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document) {\n        super(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document);\n        this._tooltipComponent = TooltipComponent;\n    }\n}\nMatTooltip.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatTooltip, deps: [{ token: i1.Overlay }, { token: i0.ElementRef }, { token: i2.ScrollDispatcher }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i3.Platform }, { token: i4.AriaDescriber }, { token: i4.FocusMonitor }, { token: MAT_TOOLTIP_SCROLL_STRATEGY }, { token: i5.Directionality, optional: true }, { token: MAT_TOOLTIP_DEFAULT_OPTIONS, optional: true }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nMatTooltip.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatTooltip, selector: \"[matTooltip]\", host: { classAttribute: \"mat-tooltip-trigger\" }, exportAs: [\"matTooltip\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatTooltip, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTooltip]',\n                    exportAs: 'matTooltip',\n                    host: {\n                        'class': 'mat-tooltip-trigger',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i2.ScrollDispatcher }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i3.Platform }, { type: i4.AriaDescriber }, { type: i4.FocusMonitor }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n                    }] }, { type: i5.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\nclass _TooltipComponentBase {\n    constructor(_changeDetectorRef) {\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Property watched by the animation framework to show or hide the tooltip */\n        this._visibility = 'initial';\n        /** Whether interactions on the page should close the tooltip */\n        this._closeOnInteraction = false;\n        /** Subject for notifying that the tooltip has been hidden from the view */\n        this._onHide = new Subject();\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        clearTimeout(this._hideTimeoutId);\n        // Body interactions should cancel the tooltip if there is a delay in showing.\n        this._closeOnInteraction = true;\n        this._showTimeoutId = setTimeout(() => {\n            this._visibility = 'visible';\n            this._showTimeoutId = undefined;\n            this._onShow();\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        clearTimeout(this._showTimeoutId);\n        this._hideTimeoutId = setTimeout(() => {\n            this._visibility = 'hidden';\n            this._hideTimeoutId = undefined;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden() {\n        return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n    isVisible() {\n        return this._visibility === 'visible';\n    }\n    ngOnDestroy() {\n        clearTimeout(this._showTimeoutId);\n        clearTimeout(this._hideTimeoutId);\n        this._onHide.complete();\n    }\n    _animationStart() {\n        this._closeOnInteraction = false;\n    }\n    _animationDone(event) {\n        const toState = event.toState;\n        if (toState === 'hidden' && !this.isVisible()) {\n            this._onHide.next();\n        }\n        if (toState === 'visible' || toState === 'hidden') {\n            this._closeOnInteraction = true;\n        }\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Callback for when the timeout in this.show() gets completed.\n     * This method is only needed by the mdc-tooltip, and so it is only implemented\n     * in the mdc-tooltip, not here.\n     */\n    _onShow() { }\n}\n_TooltipComponentBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: _TooltipComponentBase, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\n_TooltipComponentBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: _TooltipComponentBase, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: _TooltipComponentBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; } });\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent extends _TooltipComponentBase {\n    constructor(changeDetectorRef, _breakpointObserver) {\n        super(changeDetectorRef);\n        this._breakpointObserver = _breakpointObserver;\n        /** Stream that emits whether the user has a handset-sized display.  */\n        this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n    }\n}\nTooltipComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: TooltipComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i6.BreakpointObserver }], target: i0.ɵɵFactoryTarget.Component });\nTooltipComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: TooltipComponent, selector: \"mat-tooltip-component\", host: { attributes: { \"aria-hidden\": \"true\" }, properties: { \"style.zoom\": \"_visibility === \\\"visible\\\" ? 1 : null\" } }, usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-tooltip\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\"\\n     [@state]=\\\"_visibility\\\"\\n     (@state.start)=\\\"_animationStart()\\\"\\n     (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\\n\", styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"], directives: [{ type: i7.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], pipes: { \"async\": i7.AsyncPipe }, animations: [matTooltipAnimations.tooltipState], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: TooltipComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tooltip-component', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [matTooltipAnimations.tooltipState], host: {\n                        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                        '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n                        'aria-hidden': 'true',\n                    }, template: \"<div class=\\\"mat-tooltip\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\"\\n     [@state]=\\\"_visibility\\\"\\n     (@state.start)=\\\"_animationStart()\\\"\\n     (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\\n\", styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i6.BreakpointObserver }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatTooltipModule {\n}\nMatTooltipModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatTooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatTooltipModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatTooltipModule, declarations: [MatTooltip, TooltipComponent], imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule], exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule] });\nMatTooltipModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatTooltipModule, providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[A11yModule, CommonModule, OverlayModule, MatCommonModule], MatCommonModule, CdkScrollableModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatTooltipModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],\n                    exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n                    declarations: [MatTooltip, TooltipComponent],\n                    providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, _MatTooltipBase, _TooltipComponentBase, getMatTooltipInvalidPositionError, matTooltipAnimations };\n"],"sourceRoot":"webpack:///","file":"894.fa535cf2414fa900.js"}